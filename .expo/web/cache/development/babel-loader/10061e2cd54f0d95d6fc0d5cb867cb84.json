{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport CalendarStrip from 'react-native-calendar-strip';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport AddMedication from \"./AddMedication\";\nimport MedicationItem from \"./MedicationItem\";\nimport { collection, doc, getDoc, getDocs } from \"@firebase/firestore\";\nimport { db } from \"../firebase/Config\";\nimport { log } from \"react-native-reanimated\";\nimport { AuthContext } from \"../Context/AuthContext\";\nimport { Divider } from \"react-native-elements/dist/divider/Divider\";\nexport default function Calendar(_ref) {\n  var currentUserId = _ref.currentUserId;\n  var today = new Date().toLocaleDateString();\n\n  var _useState = useState(today),\n      _useState2 = _slicedToArray(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newDate = _useState4[0],\n      setNewDate = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      newMedication = _useState6[0],\n      setNewMedication = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      newTime = _useState8[0],\n      setNewTime = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      medicationsList = _useState10[0],\n      setMedicationsList = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      userId = _useState12[0],\n      setUserId = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      selectedReminders = _useState14[0],\n      setSelectedReminders = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      currentReminders = _useState16[0],\n      setCurrentReminders = _useState16[1];\n\n  var convertDate = function convertDate(date) {\n    return date.toDate().toLocaleDateString();\n  };\n\n  var _useState17 = useState([{\n    \"id\": \"MFX28OWS1LH\",\n    \"name\": \"Benicar\",\n    \"reminder\": {\n      \"id\": \"SBK51WRJ5PG\",\n      \"timestamp\": \"08:00\",\n      \"quantity\": 4\n    }\n  }, {\n    \"id\": \"QLH42QUI6UV\",\n    \"name\": \"Lisinopril\",\n    \"reminder\": {\n      \"id\": \"XUG15CGB3DY\",\n      \"timestamp\": \"08:00\",\n      \"quantity\": 3\n    }\n  }, {\n    \"id\": \"LDM45HIH5VO\",\n    \"name\": \"Fluoxetine HCl\",\n    \"reminder\": {\n      \"id\": \"NWZ04KIR9YH\",\n      \"timestamp\": \"08:00\",\n      \"quantity\": 4\n    }\n  }, {\n    \"id\": \"DGK09IPT9KV\",\n    \"name\": \"Benicar\",\n    \"reminder\": {\n      \"id\": \"YNM20DHO1AI\",\n      \"timestamp\": \"08:00\",\n      \"quantity\": 4\n    }\n  }, {\n    \"id\": \"TGW18BQB4IK\",\n    \"name\": \"Vyvanse\",\n    \"reminder\": {\n      \"id\": \"ZCN38JAI9XE\",\n      \"timestamp\": \"08:00\",\n      \"quantity\": 3\n    }\n  }, {\n    \"id\": \"SOA44JDE8IP\",\n    \"name\": \"Methylprednisolone\",\n    \"reminder\": {\n      \"id\": \"EUX13TYH7UI\",\n      \"timestamp\": \"08:00\",\n      \"quantity\": 4\n    }\n  }, {\n    \"id\": \"RQS83UCI9EC\",\n    \"name\": \"Allopurinol\",\n    \"reminder\": {\n      \"id\": \"CNQ43GZH5GE\",\n      \"timestamp\": \"08:00\",\n      \"quantity\": 2\n    }\n  }, {\n    \"id\": \"TJW29SKF6ZV\",\n    \"name\": \"Metformin HCl\",\n    \"reminder\": {\n      \"id\": \"PWD30XPI1HX\",\n      \"timestamp\": \"08:00\",\n      \"quantity\": 2\n    }\n  }, {\n    \"id\": \"MHC42KWS0FV\",\n    \"name\": \"Prednisone\",\n    \"reminder\": {\n      \"id\": \"QFX69RWE2ZS\",\n      \"timestamp\": \"08:00\",\n      \"quantity\": 4\n    }\n  }, {\n    \"id\": \"BIA46KHY9UY\",\n    \"name\": \"Spiriva Handihaler\",\n    \"reminder\": {\n      \"id\": \"QNI51FGE4BZ\",\n      \"timestamp\": \"08:00\",\n      \"quantity\": 3\n    }\n  }]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      listMedication = _useState18[0],\n      setListMedication = _useState18[1];\n\n  var addMedicationReminder = function addMedicationReminder() {\n    if (newDate != '' && newMedication != '') {\n      setListMedication([].concat(_toConsumableArray(listMedication), [{\n        key: Math.random().toString(),\n        medication: newMedication,\n        time: newTime,\n        date: newDate\n      }]));\n      Keyboard.dismiss();\n      setNewMedication('');\n      setNewTime('');\n      setNewDate('');\n    }\n  };\n\n  var clearMedication = function clearMedication(key) {\n    setListMedication(function (prevListMedication) {\n      return prevListMedication.filter(function (medication) {\n        return medication.key != key;\n      });\n    });\n  };\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      openAddMedication = _useState20[0],\n      setOpenAddMedication = _useState20[1];\n\n  var getUserMedication = function getUserMedication() {\n    var userId, pathToMedications, userRef, medications;\n    return _regeneratorRuntime.async(function getUserMedication$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            userId = currentUserId;\n            console.log('Current user id', userId);\n            pathToMedications = 'users' + '/' + userId + '/' + 'medications';\n            userRef = collection(db, pathToMedications);\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(getDocs(userRef));\n\n          case 6:\n            medications = _context2.sent;\n            medications.docs.forEach(function (medication) {\n              var getUserReminders = function getUserReminders() {\n                var pathToReminders, remindersRef, remindersDocs, reminders;\n                return _regeneratorRuntime.async(function getUserReminders$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        pathToReminders = pathToMedications + '/' + medication.id + '/' + 'reminders';\n                        remindersRef = collection(db, pathToReminders);\n                        _context.next = 4;\n                        return _regeneratorRuntime.awrap(getDocs(remindersRef));\n\n                      case 4:\n                        remindersDocs = _context.sent;\n                        reminders = remindersDocs.docs.map(function (reminder) {\n                          return _objectSpread(_objectSpread({}, reminder.data()), {}, {\n                            id: reminder.id\n                          });\n                        });\n                        setMedicationsList(function (prevList) {\n                          return [].concat(_toConsumableArray(prevList), [_objectSpread(_objectSpread({}, medication.data()), {}, {\n                            id: medication.id,\n                            reminders: reminders\n                          })]);\n                        });\n\n                      case 7:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              };\n\n              getUserReminders();\n            });\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(CalendarStrip, {\n    scrollToOnSetSelectedDate: false,\n    scrollable: true,\n    scrollerPaging: true,\n    style: {\n      height: 80\n    },\n    calendarColor: 'white',\n    calendarHeaderStyle: {\n      color: 'black'\n    },\n    onDateSelected: function onDateSelected(selectedDate) {},\n    dateNameStyle: {\n      color: 'black'\n    },\n    dateNumberStyle: {\n      color: 'black'\n    },\n    highlightDateNameStyle: {\n      color: '#53CBFF'\n    },\n    highlightDateNumberStyle: {\n      color: '#53CBFF'\n    },\n    calendarAnimation: {\n      type: 'sequence',\n      duration: 15\n    },\n    daySelectionAnimation: {\n      type: \"border\",\n      borderWidth: 2,\n      borderHighlightColor: '#53CBFF'\n    }\n  }), React.createElement(View, {\n    style: styles.listContainer\n  }, React.createElement(View, {\n    style: styles.list\n  }, React.createElement(Text, {\n    style: {\n      alignSelf: 'center',\n      marginVertical: 5,\n      fontSize: 18\n    }\n  }, \"Medications\"), React.createElement(FlatList, {\n    showsVerticalScrollIndicator: true,\n    data: listMedication,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(MedicationItem, {\n        key: item.id,\n        reminder: item\n      });\n    }\n  })), React.createElement(View, {\n    style: styles.submitButton\n  }, React.createElement(MaterialIcons, {\n    color: \"white\",\n    name: \"add-circle\",\n    size: 48,\n    onPress: function onPress() {\n      return setOpenAddMedication(true);\n    }\n  }))), React.createElement(Modal, {\n    animationType: \"slide\",\n    visible: openAddMedication,\n    onRequestClose: function onRequestClose() {\n      Alert.alert('Form has been closed');\n    }\n  }, React.createElement(AddMedication, {\n    newDate: newDate,\n    newMedication: newMedication,\n    setNewDate: setNewDate,\n    setNewMedication: setNewMedication,\n    setOpenAddMedication: setOpenAddMedication,\n    addMedicationReminder: addMedicationReminder,\n    newTime: newTime,\n    setNewTime: setNewTime\n  })));\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'white'\n  },\n  list: {\n    flex: 1\n  },\n  listContainer: {\n    flex: 1,\n    backgroundColor: '#53cbff',\n    borderTopLeftRadius: 30,\n    borderTopRightRadius: 30\n  },\n  medicationItem: {\n    marginTop: 20,\n    marginHorizontal: 20,\n    padding: 10,\n    flexDirection: 'row',\n    borderWidth: 2,\n    borderRadius: 10,\n    borderStyle: \"dotted\"\n  },\n  submitButton: {\n    position: 'relative',\n    alignItems: 'center',\n    marginVertical: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Máy tính/Projects/MediReminder/components/Calendar.js"],"names":["React","useContext","useEffect","useState","CalendarStrip","MaterialIcons","AddMedication","MedicationItem","collection","doc","getDoc","getDocs","db","log","AuthContext","Divider","Calendar","currentUserId","today","Date","toLocaleDateString","date","setDate","newDate","setNewDate","newMedication","setNewMedication","newTime","setNewTime","medicationsList","setMedicationsList","userId","setUserId","selectedReminders","setSelectedReminders","currentReminders","setCurrentReminders","convertDate","toDate","listMedication","setListMedication","addMedicationReminder","key","Math","random","toString","medication","time","Keyboard","dismiss","clearMedication","prevListMedication","filter","openAddMedication","setOpenAddMedication","getUserMedication","console","pathToMedications","userRef","medications","docs","forEach","getUserReminders","pathToReminders","id","remindersRef","remindersDocs","reminders","map","reminder","data","prevList","styles","container","height","color","selectedDate","type","duration","borderWidth","borderHighlightColor","listContainer","list","alignSelf","marginVertical","fontSize","item","submitButton","Alert","alert","StyleSheet","create","flex","backgroundColor","borderTopLeftRadius","borderTopRightRadius","medicationItem","marginTop","marginHorizontal","padding","flexDirection","borderRadius","borderStyle","position","alignItems"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { StyleSheet, Text, TextInput, View, TouchableOpacity, Button, TouchableWithoutFeedback, Keyboard, FlatList, Modal, Alert } from \"react-native\";\r\nimport CalendarStrip from 'react-native-calendar-strip';\r\nimport {MaterialIcons} from '@expo/vector-icons'\r\nimport AddMedication from \"./AddMedication\";\r\nimport MedicationItem from \"./MedicationItem\";\r\nimport { collection, doc, getDoc, getDocs } from \"@firebase/firestore\";\r\nimport { db } from \"../firebase/Config\";\r\nimport { log } from \"react-native-reanimated\";\r\nimport { AuthContext } from \"../Context/AuthContext\";\r\nimport { Divider } from \"react-native-elements/dist/divider/Divider\";\r\nexport default function Calendar({currentUserId}){\r\n    const today = new Date().toLocaleDateString();\r\n\r\n    const [date, setDate] = useState(today);\r\n    const [newDate, setNewDate] = useState('');\r\n    const [newMedication, setNewMedication] = useState('');\r\n    const [newTime, setNewTime] = useState('');\r\n    const [medicationsList, setMedicationsList] = useState([]);\r\n    const [userId, setUserId] = useState('');\r\n    const [selectedReminders, setSelectedReminders] = useState([]);\r\n    const [currentReminders, setCurrentReminders] = useState([]);\r\n\r\n    const convertDate = (date) => {\r\n      return date.toDate().toLocaleDateString();\r\n    }\r\n    \r\n    const [listMedication, setListMedication] = useState([\r\n      {\r\n        \"id\": \"MFX28OWS1LH\",\r\n        \"name\": \"Benicar\",\r\n        \"reminder\": {\r\n          \"id\": \"SBK51WRJ5PG\",\r\n          \"timestamp\": \"08:00\",\r\n          \"quantity\": 4\r\n        }\r\n      },\r\n      {\r\n        \"id\": \"QLH42QUI6UV\",\r\n        \"name\": \"Lisinopril\",\r\n        \"reminder\": {\r\n          \"id\": \"XUG15CGB3DY\",\r\n          \"timestamp\": \"08:00\",\r\n          \"quantity\": 3\r\n        }\r\n      },\r\n      {\r\n        \"id\": \"LDM45HIH5VO\",\r\n        \"name\": \"Fluoxetine HCl\",\r\n        \"reminder\": {\r\n          \"id\": \"NWZ04KIR9YH\",\r\n          \"timestamp\": \"08:00\",\r\n          \"quantity\": 4\r\n        }\r\n      },\r\n      {\r\n        \"id\": \"DGK09IPT9KV\",\r\n        \"name\": \"Benicar\",\r\n        \"reminder\": {\r\n          \"id\": \"YNM20DHO1AI\",\r\n          \"timestamp\": \"08:00\",\r\n          \"quantity\": 4\r\n        }\r\n      },\r\n      {\r\n        \"id\": \"TGW18BQB4IK\",\r\n        \"name\": \"Vyvanse\",\r\n        \"reminder\": {\r\n          \"id\": \"ZCN38JAI9XE\",\r\n          \"timestamp\": \"08:00\",\r\n          \"quantity\": 3\r\n        }\r\n      },\r\n      {\r\n        \"id\": \"SOA44JDE8IP\",\r\n        \"name\": \"Methylprednisolone\",\r\n        \"reminder\": {\r\n          \"id\": \"EUX13TYH7UI\",\r\n          \"timestamp\": \"08:00\",\r\n          \"quantity\": 4\r\n        }\r\n      },\r\n      {\r\n        \"id\": \"RQS83UCI9EC\",\r\n        \"name\": \"Allopurinol\",\r\n        \"reminder\": {\r\n          \"id\": \"CNQ43GZH5GE\",\r\n          \"timestamp\": \"08:00\",\r\n          \"quantity\": 2\r\n        }\r\n      },\r\n      {\r\n        \"id\": \"TJW29SKF6ZV\",\r\n        \"name\": \"Metformin HCl\",\r\n        \"reminder\": {\r\n          \"id\": \"PWD30XPI1HX\",\r\n          \"timestamp\": \"08:00\",\r\n          \"quantity\": 2\r\n        }\r\n      },\r\n      {\r\n        \"id\": \"MHC42KWS0FV\",\r\n        \"name\": \"Prednisone\",\r\n        \"reminder\": {\r\n          \"id\": \"QFX69RWE2ZS\",\r\n          \"timestamp\": \"08:00\",\r\n          \"quantity\": 4\r\n        }\r\n      },\r\n      {\r\n        \"id\": \"BIA46KHY9UY\",\r\n        \"name\": \"Spiriva Handihaler\",\r\n        \"reminder\": {\r\n          \"id\": \"QNI51FGE4BZ\",\r\n          \"timestamp\": \"08:00\",\r\n          \"quantity\": 3\r\n        }\r\n      }\r\n    ])\r\n\r\n\r\n    const addMedicationReminder = () => {\r\n      if (newDate != '' && newMedication != '') {\r\n        setListMedication([\r\n          ...listMedication,\r\n          {\r\n            // key: (listMedication.length + 1).toString(),\r\n            key: Math.random().toString(),\r\n            medication: newMedication,\r\n            time: newTime,\r\n            date: newDate\r\n          }\r\n        ]);\r\n\r\n        Keyboard.dismiss();\r\n        setNewMedication('');\r\n        setNewTime('');\r\n        setNewDate('');\r\n      }\r\n    }\r\n\r\n    const clearMedication = (key) => {\r\n      setListMedication(\r\n        (prevListMedication) => {\r\n          return prevListMedication.filter(\r\n            medication => medication.key != key\r\n          )\r\n        }\r\n      )\r\n    }\r\n\r\n    const [openAddMedication, setOpenAddMedication] = useState(false);\r\n\r\n\r\n    const getUserMedication = async () => {\r\n      const userId = currentUserId;\r\n\r\n      console.log('Current user id', userId);\r\n      const pathToMedications = 'users' + '/' + userId + '/' + 'medications';\r\n      const userRef = collection(db, pathToMedications);\r\n      const medications = await getDocs(userRef);\r\n      \r\n\r\n      medications.docs.forEach(\r\n        medication => {\r\n          const getUserReminders = async () => {\r\n            const pathToReminders = pathToMedications + '/' + medication.id + '/' + 'reminders';\r\n            const remindersRef = collection(db, pathToReminders);\r\n            const remindersDocs = await getDocs(remindersRef);\r\n            const reminders = remindersDocs.docs.map( reminder => ({...reminder.data(), id: reminder.id}));\r\n\r\n            setMedicationsList(\r\n              (prevList) => ([...prevList, {...medication.data(), id: medication.id, reminders: reminders}])\r\n            )\r\n          }\r\n\r\n          getUserReminders();\r\n        }\r\n      )\r\n    }\r\n\r\n    // useEffect(\r\n    //   () => {\r\n\r\n    //     console.log('User id in calendar', currentUserId);\r\n\r\n    //     if (medicationsList.length == 0) getUserMedication();\r\n\r\n    //     console.log('Reminders data are fetched');\r\n    //     console.log('Current medication list', medicationsList);\r\n\r\n    //   }\r\n    // , [])\r\n\r\n    return (\r\n      <View style={styles.container}>\r\n        <CalendarStrip\r\n        scrollToOnSetSelectedDate={false}\r\n        scrollable={true}\r\n        scrollerPaging={true}\r\n        style={{height: 80}}\r\n        calendarColor={'white'}\r\n        calendarHeaderStyle={{color: 'black'}}\r\n\r\n        onDateSelected={(selectedDate) => {\r\n            // * Display the reminders base on the selected date.\r\n            // console.log(selectedDate.toDate().toLocaleDateString());\r\n\r\n            // const res = medicationsList.map(\r\n            //   medication => {\r\n            //     const reminders = medication.reminders.filter(\r\n            //       reminder => {return convertDate(reminder.timestamp) == convertDate(selectedDate);}\r\n            //     )\r\n\r\n            //     console.log(reminders);\r\n\r\n            //     return reminders.map(\r\n            //       reminder => ({\r\n            //         id: medication.id,\r\n            //         name: medication.name,\r\n            //         reminder: reminder\r\n            //       })\r\n            //     )\r\n            //   }\r\n            // )\r\n\r\n            // setSelectedReminders(() => res.flat(1));\r\n\r\n            // console.log('Selected reminders are', selectedReminders);\r\n        }}\r\n        \r\n        dateNameStyle={{color: 'black'}}\r\n        dateNumberStyle={{color: 'black'}}\r\n\r\n        highlightDateNameStyle={{color: '#53CBFF'}}\r\n        highlightDateNumberStyle={{color: '#53CBFF'}}\r\n        \r\n        calendarAnimation={{type: 'sequence', duration: 15}}\r\n        daySelectionAnimation={\r\n          {\r\n          type: \"border\",\r\n          borderWidth: 2,\r\n          borderHighlightColor: '#53CBFF',\r\n          }\r\n        }\r\n        />\r\n\r\n        <View style={styles.listContainer}>\r\n          <View style={styles.list}>\r\n            <Text style={{alignSelf: 'center', marginVertical: 5, fontSize: 18}}>Medications</Text>\r\n            {/* <FlatList\r\n              showsVerticalScrollIndicator={true}\r\n              data={selectedReminders}\r\n              keyExtractor={(item) => item.reminder.id}\r\n              renderItem={({ item })  => {\r\n                // if (item.timestamp == date) {\r\n                //   return <MedicationItem key={Math.random()} medication={item.name} />\r\n                // }\r\n                return <MedicationItem key={Math.random()} reminder={item}/>\r\n              }\r\n              }\r\n            /> */}\r\n              <FlatList\r\n              showsVerticalScrollIndicator={true}\r\n              data={listMedication}\r\n              keyExtractor={(item) => item.id}\r\n              renderItem={({ item })  => {\r\n                // if (item.timestamp == date) {\r\n                //   return <MedicationItem key={Math.random()} medication={item.name} />\r\n                // }\r\n                return <MedicationItem key={item.id} reminder={item}/>\r\n              }\r\n              }\r\n            />\r\n          </View>\r\n          {/* Add form Button */}\r\n          <View style={styles.submitButton}>\r\n            <MaterialIcons\r\n              color='white'\r\n              name='add-circle'\r\n              size={48}\r\n              onPress={() => setOpenAddMedication(true)}\r\n            />\r\n          </View>\r\n        </View>\r\n\r\n        <Modal\r\n          animationType='slide'\r\n          visible={openAddMedication}\r\n          onRequestClose={() => {\r\n            Alert.alert('Form has been closed');\r\n          }}\r\n        >\r\n          <AddMedication \r\n            newDate = {newDate}\r\n            newMedication={newMedication}\r\n            setNewDate={setNewDate}\r\n            setNewMedication={setNewMedication}\r\n            setOpenAddMedication={setOpenAddMedication}\r\n            addMedicationReminder={addMedicationReminder}\r\n            newTime={newTime}\r\n            setNewTime={setNewTime}\r\n          />\r\n        </Modal>\r\n        \r\n      </View>\r\n    )\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: 'white',\r\n  },\r\n  list: {\r\n    flex: 1,\r\n    // backgroundColor: '#53cbff',\r\n  },\r\n  listContainer: {\r\n    flex: 1,\r\n    backgroundColor: '#53cbff',\r\n    borderTopLeftRadius: 30,\r\n    borderTopRightRadius: 30\r\n  },\r\n  medicationItem: {\r\n    marginTop: 20,\r\n    marginHorizontal: 20,\r\n    padding: 10,\r\n    flexDirection: 'row',\r\n    borderWidth: 2,\r\n    borderRadius: 10,\r\n    borderStyle: \"dotted\"\r\n  },\r\n  submitButton: {\r\n    position: 'relative',\r\n    alignItems: 'center',\r\n    marginVertical: 10,\r\n    // backgroundColor: '#53cbff',\r\n  }\r\n})\r\n\r\n"]},"metadata":{},"sourceType":"module"}