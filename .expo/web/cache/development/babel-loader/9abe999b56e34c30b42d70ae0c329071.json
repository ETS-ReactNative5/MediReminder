{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { addDoc, collection, collectionGroup, Timestamp } from '@firebase/firestore';\nimport { db } from \"../firebase/Config\";\nimport { useAuth } from \"../Context/AuthContext\";\nexport default function QRScannerScreen(_ref) {\n  var navigation = _ref.navigation,\n      setOpenQRCodeScanner = _ref.setOpenQRCodeScanner;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var _useAuth = useAuth(),\n      currentUser = _useAuth.currentUser,\n      medications = _useAuth.medications,\n      setMedications = _useAuth.setMedications;\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref2) {\n    var type, data, medicationNewDoc, medicationDocRef;\n    return _regeneratorRuntime.async(function handleBarCodeScanned$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            type = _ref2.type, data = _ref2.data;\n            setScanned(true);\n            alert(\"Data scanned: \" + data);\n            data = JSON.parse(data);\n            console.log(data);\n            medicationNewDoc = {\n              name: data.name,\n              pillsInStock: data.pillsInStock,\n              refill: data.refill,\n              createdAt: Timestamp.fromDate(new Date()),\n              updatedAt: Timestamp.fromDate(new Date()),\n              startDate: Timestamp.fromDate(new Date(data.startDate)),\n              endDate: data.endDate ? Timestamp.fromDate(new Date(data.endDate)) : null\n            };\n            medicationDocRef = collection(db, 'users', currentUser.uid, 'medications');\n            _context3.next = 9;\n            return _regeneratorRuntime.awrap(addDoc(medicationDocRef, medicationNewDoc).then(function _callee2(medicationDoc) {\n              var remindersDocRef, array, i, reminderNewDoc;\n              return _regeneratorRuntime.async(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      remindersDocRef = collection(db, 'users', currentUser.uid, 'medications', medicationDoc.id, 'reminders');\n                      array = [];\n                      i = 0;\n\n                    case 3:\n                      if (!(i < data.reminders.length)) {\n                        _context2.next = 10;\n                        break;\n                      }\n\n                      reminderNewDoc = {\n                        quantity: data.reminders[i].quantity,\n                        note: data.reminders[i].note,\n                        isConfirmed: false,\n                        isMissed: false,\n                        timestamp: Timestamp.fromDate(new Date(data.reminders[i].timestamp)),\n                        updatedAt: Timestamp.fromDate(new Date())\n                      };\n                      _context2.next = 7;\n                      return _regeneratorRuntime.awrap(addDoc(remindersDocRef, reminderNewDoc).then(function (reminderDoc) {\n                        array.push(_objectSpread(_objectSpread({}, reminderDoc), {}, {\n                          id: reminderDoc.id,\n                          timestamp: new Date(data.reminders[i].timestamp),\n                          createdAt: new Date(),\n                          updatedAt: new Date()\n                        }));\n                      }));\n\n                    case 7:\n                      ++i;\n                      _context2.next = 3;\n                      break;\n\n                    case 10:\n                      setMedications(function (prevMedications) {\n                        return [].concat(_toConsumableArray(prevMedications), [_objectSpread(_objectSpread({}, medicationNewDoc), {}, {\n                          id: medicationDoc.id,\n                          createdAt: new Date(),\n                          updatedAt: new Date(),\n                          reminders: array\n                        })]);\n                      });\n\n                    case 11:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }));\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleClickBack = function handleClickBack() {\n    setOpenQRCodeScanner(false);\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, null, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, null, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: StyleSheet.absoluteFillObject\n  }), scanned && React.createElement(Button, {\n    title: 'Tap to Scan Again',\n    onPress: function onPress() {\n      return setScanned(false);\n    }\n  }), React.createElement(Button, {\n    title: 'Back to Home',\n    onPress: handleClickBack\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Máy tính/Projects/MediReminder/screens/QRScannerScreen.js"],"names":["React","useState","useEffect","BarCodeScanner","NavigationContainer","addDoc","collection","collectionGroup","Timestamp","db","useAuth","QRScannerScreen","navigation","setOpenQRCodeScanner","hasPermission","setHasPermission","scanned","setScanned","requestPermissionsAsync","status","currentUser","medications","setMedications","handleBarCodeScanned","type","data","alert","JSON","parse","console","log","medicationNewDoc","name","pillsInStock","refill","createdAt","fromDate","Date","updatedAt","startDate","endDate","medicationDocRef","uid","then","medicationDoc","remindersDocRef","id","array","i","reminders","length","reminderNewDoc","quantity","note","isConfirmed","isMissed","timestamp","reminderDoc","push","prevMedications","handleClickBack","styles","container","undefined","StyleSheet","absoluteFillObject","create","flex","flexDirection","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Text, View, StyleSheet, Button, TouchableOpacity } from 'react-native';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\n// import HomeScreen from '../screens/HomeScreen';\r\nimport { addDoc, collection, collectionGroup, Timestamp } from '@firebase/firestore';\r\nimport { db } from '../firebase/Config';\r\nimport { useAuth } from '../Context/AuthContext';\r\n\r\nexport default function QRScannerScreen({navigation, setOpenQRCodeScanner}) {\r\n    const [hasPermission, setHasPermission] = useState(null);\r\n    const [scanned, setScanned] = useState(false);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n        const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n        setHasPermission(status === 'granted');\r\n        })();\r\n    }, []);\r\n\r\n    const { currentUser, medications, setMedications } = useAuth()\r\n\r\n    const handleBarCodeScanned = async ({ type, data }) => {\r\n        setScanned(true);\r\n        alert(`Data scanned: ${data}`);\r\n        data = JSON.parse(data)\r\n        console.log(data);\r\n        \r\n        // Add data to BE & FE\r\n        const medicationNewDoc = {\r\n            name: data.name,\r\n            pillsInStock: data.pillsInStock,\r\n            refill: data.refill,\r\n            createdAt: Timestamp.fromDate(new Date()),\r\n            updatedAt: Timestamp.fromDate(new Date()),\r\n            startDate: Timestamp.fromDate(new Date(data.startDate)),\r\n            endDate: data.endDate ? Timestamp.fromDate(new Date(data.endDate)) : null\r\n        }\r\n\r\n        const medicationDocRef = collection(db, 'users', currentUser.uid, 'medications')\r\n        await addDoc(medicationDocRef, medicationNewDoc).then( async medicationDoc => {\r\n            const remindersDocRef = collection(db, 'users', currentUser.uid, 'medications', medicationDoc.id, 'reminders')\r\n            \r\n            let array = []\r\n\r\n            for(var i = 0; i < data.reminders.length; ++i) {\r\n                const reminderNewDoc = {\r\n                    quantity: data.reminders[i].quantity,\r\n                    note: data.reminders[i].note,\r\n                    isConfirmed: false,\r\n                    isMissed: false,\r\n                    timestamp: Timestamp.fromDate(new Date(data.reminders[i].timestamp)),\r\n                    // createdAt: Timestamp.fromDate(new Date()),\r\n                    updatedAt: Timestamp.fromDate(new Date())\r\n                }\r\n\r\n                await addDoc(remindersDocRef, reminderNewDoc).then( reminderDoc => {\r\n                    array.push({\r\n                        ...reminderDoc,\r\n                        id: reminderDoc.id,\r\n                        timestamp: new Date(data.reminders[i].timestamp),\r\n                        createdAt: new Date(),\r\n                        updatedAt: new Date()\r\n                    })\r\n                })\r\n            }\r\n\r\n            setMedications(prevMedications => [...prevMedications, {\r\n                ...medicationNewDoc,\r\n                id: medicationDoc.id,\r\n                createdAt: new Date(),\r\n                updatedAt: new Date(),\r\n                reminders: array\r\n            }])\r\n        })\r\n\r\n    };\r\n\r\n    const handleClickBack = () => {\r\n        setOpenQRCodeScanner(false)\r\n    }\r\n\r\n    if (hasPermission === null) {\r\n        return <Text>Requesting for camera permission</Text>;\r\n    }\r\n    if (hasPermission === false) {\r\n        return <Text>No access to camera</Text>;\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <BarCodeScanner \r\n                onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\r\n                style={StyleSheet.absoluteFillObject}\r\n            />\r\n            {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\r\n            <Button title={'Back to Home'} onPress={handleClickBack} />\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n    },\r\n\r\n});"]},"metadata":{},"sourceType":"module"}