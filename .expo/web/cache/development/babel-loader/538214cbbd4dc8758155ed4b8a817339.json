{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { Picker } from '@react-native-picker/picker';\nimport DateTimePickerModal from 'react-native-modal-datetime-picker';\nimport DateTimePicker from \"react-native-modal-datetime-picker\";\nimport { useRef } from \"react\";\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport ToggleSwitch from \"toggle-switch-react-native\";\nimport { Link } from \"@react-navigation/native\";\nexport default function AddMedication(_ref) {\n  var setOpenAddMedication = _ref.setOpenAddMedication,\n      addMedicationReminder = _ref.addMedicationReminder,\n      newMedication = _ref.newMedication,\n      newDate = _ref.newDate,\n      setNewMedication = _ref.setNewMedication,\n      setNewDate = _ref.setNewDate,\n      newTime = _ref.newTime,\n      setNewTime = _ref.setNewTime;\n\n  var _useState = useState('daily'),\n      _useState2 = _slicedToArray(_useState, 2),\n      reminderType = _useState2[0],\n      setReminderType = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      doses = _useState4[0],\n      setDoses = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      interval = _useState6[0],\n      setInterval = _useState6[1];\n\n  var daysInWeek = [{\n    key: '0',\n    day: 'Monday'\n  }, {\n    key: '1',\n    day: 'Tuesday'\n  }, {\n    key: '2',\n    day: 'Wednesday'\n  }, {\n    key: '3',\n    day: 'Thursday'\n  }, {\n    key: '4',\n    day: 'Friday'\n  }, {\n    key: '5',\n    day: 'Saturday'\n  }, {\n    key: '6',\n    day: 'Sunday'\n  }];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      openSchedule = _useState8[0],\n      setOpenSchedule = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      openDetails = _useState10[0],\n      setOpenDetails = _useState10[1];\n\n  function Details() {\n    return React.createElement(ScrollView, {\n      style: styles.container\n    }, React.createElement(View, {\n      style: styles.headerBar\n    }, React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        setOpenDetails(false);\n      },\n      style: {\n        flexDirection: 'row'\n      }\n    }, React.createElement(MaterialIcons, {\n      name: \"arrow-back\",\n      size: 20\n    })), React.createElement(Text, null, \"More Details\"), React.createElement(View, {\n      style: {\n        flexDirection: 'row'\n      }\n    }, React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        setOpenDetails(false);\n        setOpenSchedule(false);\n        setOpenAddMedication(false);\n      }\n    }, React.createElement(Text, null, \"Done\")))), React.createElement(View, {\n      style: styles.buttonBox\n    }, React.createElement(Text, null, \"How many pills do you have in your stock?\"), React.createElement(View, {\n      style: styles.button\n    }, React.createElement(Text, null, \"Pills in stock\"), React.createElement(TextInput, {\n      placeholder: \"pills in stock\",\n      keyboardType: \"numeric\"\n    }))), React.createElement(View, {\n      style: styles.buttonBox\n    }, React.createElement(Text, null, \"Refill\"), React.createElement(View, {\n      style: styles.button\n    }, React.createElement(Text, null, \"Refill reminder\"), React.createElement(ToggleSwitch, {\n      isOn: openToggleSwitch,\n      onColor: \"green\",\n      offColor: \"gray\",\n      onToggle: function onToggle() {\n        return setOpenToggleSwitch(!openToggleSwitch);\n      }\n    }))));\n  }\n\n  var dateInWeek = ['Monday', 'Tuesday', 'Wesnesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n  var frequencyModes = [{\n    label: 'Every Day',\n    value: 'daily'\n  }, {\n    label: 'Specific Days',\n    value: 'specific'\n  }, {\n    label: 'Days Interval',\n    value: 'interval'\n  }];\n  var timeModes = [{\n    label: 'Once a day',\n    value: 1\n  }, {\n    label: 'Twice a day',\n    value: 2\n  }, {\n    label: 'Three times a day',\n    value: 3\n  }, {\n    label: 'Four times a day',\n    value: 4\n  }, {\n    label: 'Five times a day',\n    value: 5\n  }, {\n    label: 'Six times a day',\n    value: 6\n  }];\n\n  var _useState11 = useState('daily'),\n      _useState12 = _slicedToArray(_useState11, 2),\n      frequency = _useState12[0],\n      setFrequency = _useState12[1];\n\n  var _useState13 = useState(1),\n      _useState14 = _slicedToArray(_useState13, 2),\n      times = _useState14[0],\n      setTimes = _useState14[1];\n\n  var _useState15 = useState([{\n    time: '08:00',\n    quantity: 1\n  }]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      reminders = _useState16[0],\n      setReminders = _useState16[1];\n\n  var frequencyRef = useRef();\n  var timeRef = useRef();\n\n  function openFrequencyRef() {\n    frequencyRef.current.focus();\n  }\n\n  function openTimesRef() {\n    timeRef.current.focus();\n  }\n\n  function closeFrequency() {\n    frequencyRef.current.blur();\n  }\n\n  useEffect(function () {\n    var updateReminderList = function updateReminderList() {\n      var doses = reminders.length;\n      console.log('Times=', times);\n\n      if (doses < times) {\n        var i;\n\n        for (i = doses; i < times; i++) {\n          setReminders(function (prevReminders) {\n            return [].concat(_toConsumableArray(prevReminders), [{\n              time: '08:00',\n              quantity: 1\n            }]);\n          });\n          console.log('i=', i);\n        }\n      } else if (doses > times) {\n        setReminders(function (prevReminders) {\n          return prevReminders.slice(0, times);\n        });\n      }\n\n      console.log('Reminder list is updated now');\n    };\n\n    console.log('Hi');\n    updateReminderList();\n  }, [times]);\n\n  function DayChecker(_ref2) {\n    var day = _ref2.day;\n\n    var _useState17 = useState(true),\n        _useState18 = _slicedToArray(_useState17, 2),\n        selected = _useState18[0],\n        setSelected = _useState18[1];\n\n    return React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return setSelected(!selected);\n      },\n      style: styles.checkBox\n    }, React.createElement(Text, {\n      style: styles.checkText\n    }, day), selected ? React.createElement(MaterialIcons, {\n      name: \"check\",\n      size: 16\n    }) : React.createElement(React.Fragment, null));\n  }\n\n  function ReminderModal(_ref3) {\n    var reminders = _ref3.reminders,\n        setReminders = _ref3.setReminders,\n        reminder = _ref3.reminder,\n        idx = _ref3.idx;\n\n    var _useState19 = useState(false),\n        _useState20 = _slicedToArray(_useState19, 2),\n        openReminderModal = _useState20[0],\n        setOpenReminderModal = _useState20[1];\n\n    var _useState21 = useState(reminder.quantity),\n        _useState22 = _slicedToArray(_useState21, 2),\n        quantity = _useState22[0],\n        setQuantity = _useState22[1];\n\n    var _useState23 = useState(false),\n        _useState24 = _slicedToArray(_useState23, 2),\n        isDatePickerVisible = _useState24[0],\n        setDatePickerVisibility = _useState24[1];\n\n    var _useState25 = useState(''),\n        _useState26 = _slicedToArray(_useState25, 2),\n        date = _useState26[0],\n        setDate = _useState26[1];\n\n    var _useState27 = useState(reminder.time),\n        _useState28 = _slicedToArray(_useState27, 2),\n        time = _useState28[0],\n        setTime = _useState28[1];\n\n    var showDatePicker = function showDatePicker() {\n      setDatePickerVisibility(true);\n    };\n\n    var hideDatePicker = function hideDatePicker() {\n      setDatePickerVisibility(false);\n    };\n\n    var handleConfirm = function handleConfirm(day) {\n      var timestamp = day.getHours().toString() + ':' + (day.getMinutes() < 10 ? '0' + day.getMinutes().toString() : day.getMinutes().toString());\n      console.log('Timestamp:', timestamp);\n      setTime(timestamp);\n      hideDatePicker();\n    };\n\n    var handleClickDecrementDose = function handleClickDecrementDose() {\n      setQuantity(function (prevQuantity) {\n        return prevQuantity - 1;\n      });\n    };\n\n    var handleClickIncrementDose = function handleClickIncrementDose() {\n      setQuantity(function (prevQuantity) {\n        return prevQuantity + 1;\n      });\n    };\n\n    var handleClickDone = function handleClickDone() {\n      if (quantity !== reminder.quantity) setReminders(reminders.map(function (reminder, index) {\n        return index == idx ? {\n          time: reminder.time,\n          quantity: quantity\n        } : reminder;\n      }));\n      if (time !== reminder.time) setReminders(reminders.map(function (reminder, index) {\n        return index == idx ? {\n          time: time,\n          quantity: reminder.quantity\n        } : reminder;\n      }));\n      setOpenReminderModal(!openReminderModal);\n    };\n\n    var position = function position(idx) {\n      var pos = ['1st', '2nd', '3rd'];\n      if (idx > 2) return (idx + 1).toString() + 'th';else return pos[idx];\n    };\n\n    return React.createElement(React.Fragment, null, React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return setOpenReminderModal(!openReminderModal);\n      },\n      style: styles.reminder\n    }, React.createElement(Text, null, position(idx)), React.createElement(Text, null, reminder.time), React.createElement(Text, null, \"Take \", reminder.quantity, \" pills\")), React.createElement(Modal, {\n      transparent: true,\n      visible: openReminderModal,\n      animationType: \"fade\"\n    }, React.createElement(View, {\n      style: styles.modal\n    }, React.createElement(View, {\n      style: styles.modalContainer\n    }, React.createElement(View, {\n      style: styles.modalHeader\n    }, React.createElement(Text, {\n      style: {\n        color: 'tomato',\n        fontWeight: 'bold',\n        fontSize: 16\n      },\n      onPress: function onPress() {\n        return setOpenReminderModal(!openReminderModal);\n      }\n    }, \"Cancel\"), React.createElement(Text, null, \"Edit Time And Doses\"), React.createElement(Text, {\n      style: {\n        color: '#53cbff',\n        fontWeight: 'bold',\n        fontSize: 16\n      },\n      onPress: handleClickDone\n    }, \"Done\")), React.createElement(View, {\n      style: {\n        justifyContent: 'space-evenly',\n        flex: 1\n      }\n    }, React.createElement(TouchableOpacity, {\n      onPress: showDatePicker,\n      style: styles.modalTime\n    }, React.createElement(Text, null, \"Time\"), React.createElement(View, {\n      style: {\n        flexDirection: 'row'\n      }\n    }, React.createElement(Text, null, time), React.createElement(MaterialIcons, {\n      name: \"arrow-right\",\n      size: 20\n    })), React.createElement(DateTimePicker, {\n      isVisible: isDatePickerVisible,\n      mode: 'time',\n      onConfirm: handleConfirm,\n      onCancel: hideDatePicker\n    })), React.createElement(View, {\n      style: styles.modalDose\n    }, React.createElement(Text, null, \"Quantity\"), React.createElement(View, {\n      style: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        width: 120\n      }\n    }, React.createElement(TouchableOpacity, {\n      disabled: quantity > 1 ? false : true,\n      onPress: handleClickDecrementDose\n    }, React.createElement(MaterialCommunityIcons, {\n      name: \"minus-circle-outline\",\n      size: 28\n    })), React.createElement(Text, null, quantity), React.createElement(TouchableOpacity, {\n      onPress: handleClickIncrementDose\n    }, React.createElement(MaterialCommunityIcons, {\n      name: \"plus-circle-outline\",\n      size: 28\n    })))))))));\n  }\n\n  var _useState29 = useState(false),\n      _useState30 = _slicedToArray(_useState29, 2),\n      openToggleSwitch = _useState30[0],\n      setOpenToggleSwitch = _useState30[1];\n\n  var _useState31 = useState(new Date()),\n      _useState32 = _slicedToArray(_useState31, 2),\n      startDate = _useState32[0],\n      setStartDate = _useState32[1];\n\n  var _useState33 = useState(null),\n      _useState34 = _slicedToArray(_useState33, 2),\n      endDate = _useState34[0],\n      setEndDate = _useState34[1];\n\n  var _useState35 = useState(false),\n      _useState36 = _slicedToArray(_useState35, 2),\n      isStartDatePickerVisible = _useState36[0],\n      setStartDatePickerVisibility = _useState36[1];\n\n  var _useState37 = useState(false),\n      _useState38 = _slicedToArray(_useState37, 2),\n      isEndDatePickerVisible = _useState38[0],\n      setEndDatePickerVisibility = _useState38[1];\n\n  var showStartDatePicker = function showStartDatePicker() {\n    setStartDatePickerVisibility(true);\n  };\n\n  var hideStartDatePicker = function hideStartDatePicker() {\n    setStartDatePickerVisibility(false);\n  };\n\n  var handleConfirmStartDate = function handleConfirmStartDate(day) {\n    setStartDate(day);\n    setStartDatePickerVisibility(false);\n  };\n\n  var showEndDatePicker = function showEndDatePicker() {\n    setEndDatePickerVisibility(true);\n  };\n\n  var hideEndDatePicker = function hideEndDatePicker() {\n    setEndDate(null);\n    setEndDatePickerVisibility(false);\n  };\n\n  var handleConfirmEndDate = function handleConfirmEndDate(day) {\n    setEndDate(day);\n    setEndDatePickerVisibility(false);\n  };\n\n  var handleClickAddMedication = function handleClickAddMedication() {\n    setOpenAddMedication(false);\n  };\n\n  return React.createElement(ScrollView, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.headerBar\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setOpenAddMedication(false);\n    },\n    style: {\n      flexDirection: 'row'\n    }\n  }, React.createElement(Text, null, \"Cancel\")), React.createElement(Text, null, \"New Medication\"), React.createElement(TouchableOpacity, {\n    onPress: handleClickAddMedication,\n    style: {\n      flexDirection: 'row'\n    }\n  }, React.createElement(Text, null, \"Done\"))), React.createElement(View, {\n    style: styles.contentContainer\n  }, React.createElement(View, {\n    style: styles.boxContainer\n  }, React.createElement(Text, {\n    style: styles.boxHeaderText\n  }, \"Med Info\"), React.createElement(View, {\n    style: styles.input\n  }, React.createElement(MaterialIcons, {\n    name: \"medical-services\",\n    size: 20\n  }), React.createElement(TextInput, {\n    style: {\n      marginLeft: 10,\n      padding: 5\n    },\n    onChangeText: function onChangeText() {},\n    placeholder: \"Medication name\"\n  }))), React.createElement(View, {\n    style: styles.buttonBox\n  }, React.createElement(Text, {\n    style: styles.boxHeaderText\n  }, \"Frequency?\"), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: openFrequencyRef\n  }, React.createElement(Text, null, \"Frequency\"), React.createElement(Picker, {\n    style: {\n      width: 160,\n      backgroundColor: ''\n    },\n    ref: frequencyRef,\n    onValueChange: function onValueChange(itemVlaue, itemIdx) {\n      return setFrequency(itemVlaue);\n    },\n    selectedValue: frequency\n  }, frequencyModes.map(function (mode, idx) {\n    return React.createElement(Picker.Item, {\n      key: idx,\n      label: mode.label,\n      value: mode.value\n    });\n  })))), frequency === 'interval' ? React.createElement(View, {\n    style: styles.buttonBox\n  }, React.createElement(Text, null, \"How often?\"), React.createElement(View, {\n    style: styles.button\n  }, React.createElement(Text, null, \"Every\"), React.createElement(TextInput, {\n    placeholder: \"days\",\n    keyboardType: \"numeric\"\n  }))) : React.createElement(React.Fragment, null), React.createElement(View, {\n    style: styles.buttonBox\n  }, React.createElement(Text, {\n    style: styles.boxHeaderText\n  }, \"How many times a day?\"), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: openTimesRef\n  }, React.createElement(Text, null, times), React.createElement(Picker, {\n    ref: timeRef,\n    onValueChange: function onValueChange(itemValue, itemIdx) {\n      console.log('Item value is:', itemValue);\n      setTimes(function () {\n        return itemValue;\n      });\n    },\n    selectedValue: times\n  }, timeModes.map(function (mode, idx) {\n    return React.createElement(Picker.Item, {\n      key: idx,\n      label: mode.label,\n      value: mode.value\n    });\n  })))), React.createElement(View, {\n    style: styles.buttonBox\n  }, React.createElement(Text, {\n    style: styles.boxHeaderText\n  }, \"Set up your reminders\"), React.createElement(View, {\n    style: {\n      paddingHorizontal: 20\n    }\n  }, reminders.map(function (reminder, idx) {\n    return React.createElement(ReminderModal, {\n      key: idx,\n      reminders: reminders,\n      setReminders: setReminders,\n      idx: idx,\n      reminder: reminder\n    });\n  }))), frequency === 'specific' ? React.createElement(View, {\n    style: styles.buttonBox\n  }, React.createElement(Text, null, \"Which days?\"), dateInWeek.map(function (day) {\n    return React.createElement(DayChecker, {\n      day: day\n    });\n  })) : React.createElement(React.Fragment, null), React.createElement(View, {\n    style: styles.buttonBox\n  }, React.createElement(Text, {\n    style: styles.boxHeaderText\n  }, \"How many pills do you have in your stock?\"), React.createElement(View, {\n    style: styles.button\n  }, React.createElement(Text, null, \"Pills in stock\"), React.createElement(TextInput, {\n    placeholder: \"pills in stock\",\n    keyboardType: \"numeric\"\n  }))), React.createElement(View, {\n    style: styles.buttonBox\n  }, React.createElement(Text, {\n    style: styles.boxHeaderText\n  }, \"Refill\"), React.createElement(View, {\n    style: styles.button\n  }, React.createElement(Text, null, \"Refill reminder\"), React.createElement(ToggleSwitch, {\n    isOn: openToggleSwitch,\n    onColor: \"green\",\n    offColor: \"gray\",\n    onToggle: function onToggle() {\n      return setOpenToggleSwitch(!openToggleSwitch);\n    }\n  }))), React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    }\n  }, React.createElement(Text, null, \"Starts in \"), React.createElement(Text, {\n    onPress: showStartDatePicker,\n    style: styles.dayText\n  }, startDate.toDateString()), React.createElement(DateTimePicker, {\n    isVisible: isStartDatePickerVisible,\n    mode: 'date',\n    onCancel: hideStartDatePicker,\n    onConfirm: handleConfirmStartDate\n  })), React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    }\n  }, endDate ? React.createElement(Text, null, \"Ends in \") : React.createElement(Text, null, \"Tap to set \"), React.createElement(Text, {\n    onPress: showEndDatePicker,\n    style: styles.dayText\n  }, endDate ? endDate.toDateString() : 'end date'), React.createElement(DateTimePicker, {\n    isVisible: isEndDatePickerVisible,\n    mode: 'date',\n    onCancel: hideEndDatePicker,\n    onConfirm: handleConfirmEndDate\n  }))));\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  headerBar: {\n    height: 60,\n    padding: 10,\n    backgroundColor: '#53cbff',\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  button: {\n    flexDirection: 'row',\n    flex: 1,\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    backgroundColor: '#53cbff',\n    paddingHorizontal: 10,\n    height: 60\n  },\n  reminder: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    padding: 10,\n    backgroundColor: '#53cbff',\n    borderRadius: 10,\n    marginVertical: 5\n  },\n  modal: {\n    backgroundColor: 'rgba(52, 52, 52, 0.8)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  modalContainer: {\n    position: 'absolute',\n    top: '50%',\n    width: '100%',\n    height: '50%',\n    backgroundColor: 'white'\n  },\n  modalDose: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 10\n  },\n  modalTime: {\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  buttonBox: {\n    marginVertical: 10\n  },\n  boxHeaderText: {\n    fontWeight: 'bold'\n  },\n  contentContainer: {\n    flex: 1\n  },\n  input: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 10,\n    backgroundColor: '#53cbff',\n    height: 60\n  },\n  contentContainer: {},\n  checkBox: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    backgroundColor: '#53cbff',\n    padding: 5,\n    borderBottomWidth: 1\n  },\n  checkText: {},\n  dayText: {\n    fontWeight: 'bold',\n    color: 'tomato'\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Máy tính/Projects/MediReminder/components/AddMedication.js"],"names":["React","useEffect","useState","MaterialIcons","Picker","DateTimePickerModal","DateTimePicker","useRef","MaterialCommunityIcons","ToggleSwitch","Link","AddMedication","setOpenAddMedication","addMedicationReminder","newMedication","newDate","setNewMedication","setNewDate","newTime","setNewTime","reminderType","setReminderType","doses","setDoses","interval","setInterval","daysInWeek","key","day","openSchedule","setOpenSchedule","openDetails","setOpenDetails","Details","styles","container","headerBar","flexDirection","buttonBox","button","openToggleSwitch","setOpenToggleSwitch","dateInWeek","frequencyModes","label","value","timeModes","frequency","setFrequency","times","setTimes","time","quantity","reminders","setReminders","frequencyRef","timeRef","openFrequencyRef","current","focus","openTimesRef","closeFrequency","blur","updateReminderList","length","console","log","i","prevReminders","slice","DayChecker","selected","setSelected","checkBox","checkText","ReminderModal","reminder","idx","openReminderModal","setOpenReminderModal","setQuantity","isDatePickerVisible","setDatePickerVisibility","date","setDate","setTime","showDatePicker","hideDatePicker","handleConfirm","timestamp","getHours","toString","getMinutes","handleClickDecrementDose","prevQuantity","handleClickIncrementDose","handleClickDone","map","index","position","pos","modal","modalContainer","modalHeader","color","fontWeight","fontSize","justifyContent","flex","modalTime","modalDose","alignItems","width","Date","startDate","setStartDate","endDate","setEndDate","isStartDatePickerVisible","setStartDatePickerVisibility","isEndDatePickerVisible","setEndDatePickerVisibility","showStartDatePicker","hideStartDatePicker","handleConfirmStartDate","showEndDatePicker","hideEndDatePicker","handleConfirmEndDate","handleClickAddMedication","contentContainer","boxContainer","boxHeaderText","input","marginLeft","padding","backgroundColor","itemVlaue","itemIdx","mode","itemValue","paddingHorizontal","dayText","toDateString","StyleSheet","create","height","borderRadius","marginVertical","top","marginTop","borderBottomWidth"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { StyleSheet, View, TextInput, TouchableWithoutFeedback, Button, Text, TouchableOpacity, ScrollView, FlatList, Modal } from \"react-native\";\r\nimport { Keyboard } from \"react-native\";\r\nimport {MaterialIcons} from '@expo/vector-icons';\r\nimport {Picker} from '@react-native-picker/picker'\r\nimport DateTimePickerModal from 'react-native-modal-datetime-picker';\r\n// import DateTimePicker from '@react-native-community/datetimepicker'\r\nimport DateTimePicker from \"react-native-modal-datetime-picker\";\r\nimport { useRef } from \"react\";\r\nimport {MaterialCommunityIcons} from '@expo/vector-icons'\r\nimport ToggleSwitch from \"toggle-switch-react-native\";\r\nimport { Link } from \"@react-navigation/native\";\r\n\r\nexport default function AddMedication({setOpenAddMedication ,addMedicationReminder, newMedication, newDate, setNewMedication, setNewDate, newTime, setNewTime}){\r\n  // daily, specific, interval\r\n  const [reminderType, setReminderType] = useState('daily');\r\n  const [doses, setDoses] = useState(0);\r\n  const [interval, setInterval] = useState(0);\r\n\r\n  const daysInWeek = [\r\n    {key: '0', day: 'Monday'},\r\n    {key: '1', day: 'Tuesday'},\r\n    {key: '2', day: 'Wednesday'},\r\n    {key: '3', day: 'Thursday'},\r\n    {key: '4', day: 'Friday'},\r\n    {key: '5', day: 'Saturday'},\r\n    {key: '6', day: 'Sunday'},\r\n  ];\r\n\r\n  const [openSchedule, setOpenSchedule] = useState(false);\r\n  const [openDetails, setOpenDetails] = useState(false)\r\n\r\n  // function FrequencyInf() {\r\n\r\n\r\n  //   return (\r\n  //       <ScrollView style={styles.container}>\r\n  //         <View style={styles.headerBar}>\r\n  //           <TouchableOpacity onPress={() => setOpenSchedule(false)} style={{flexDirection: 'row'}}>\r\n  //             <MaterialIcons name='arrow-back' size={20} />\r\n  //             {/* <Text>Back</Text> */}\r\n  //           </TouchableOpacity>\r\n\r\n  //           <Text>Schedule</Text>\r\n\r\n  //           <View style={{flexDirection: 'row'}}>\r\n  //             <TouchableOpacity onPress={() => setOpenDetails(true)}>\r\n  //               <Text>Next</Text>\r\n  //               {/* <MaterialIcons onPress={() => {}} name='arrow-forward' size={20} /> */}\r\n  //             </TouchableOpacity>\r\n  //           </View>\r\n  //         </View>\r\n\r\n          \r\n\r\n  //         <DateTimePicker />\r\n  //         <Text>Start date</Text>\r\n  //         <Text>End date</Text>\r\n\r\n  //       </ScrollView>\r\n  //   )\r\n  // }\r\n  \r\n  function Details() {\r\n\r\n    return (\r\n      <ScrollView style={styles.container}>\r\n          <View style={styles.headerBar}>\r\n            <TouchableOpacity onPress={() => {\r\n              setOpenDetails(false)\r\n              }} style={{flexDirection: 'row'}}>\r\n              <MaterialIcons name='arrow-back' size={20} />\r\n              {/* <Text>Back</Text> */}\r\n            </TouchableOpacity>\r\n\r\n            <Text>More Details</Text>\r\n\r\n            <View style={{flexDirection: 'row'}}>\r\n              {/* <Link to='/Home'>Done</Link> */}\r\n              <TouchableOpacity onPress={() => {\r\n                setOpenDetails(false)\r\n                setOpenSchedule(false)\r\n                setOpenAddMedication(false)\r\n              }}>\r\n                <Text>Done</Text>\r\n                {/* <Mat/erialIcons onPress={() => {}} name='arrow-forward' size={20} /> */}\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n\r\n          <View style={styles.buttonBox}>\r\n            <Text>How many pills do you have in your stock?</Text>\r\n              <View style={styles.button}>\r\n                <Text>Pills in stock</Text>\r\n                <TextInput placeholder='pills in stock' keyboardType='numeric' />\r\n              </View>\r\n          </View>\r\n\r\n          <View style={styles.buttonBox}>\r\n            <Text>Refill</Text>\r\n              <View style={styles.button}>\r\n                <Text>Refill reminder</Text>\r\n                <ToggleSwitch\r\n                  isOn={openToggleSwitch}\r\n                  onColor='green'\r\n                  offColor='gray'\r\n                  onToggle={() => setOpenToggleSwitch(!openToggleSwitch)} />\r\n              </View>\r\n          </View>\r\n\r\n        </ScrollView>\r\n    )\r\n  }\r\n\r\n  const dateInWeek = ['Monday', 'Tuesday', 'Wesnesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\r\n\r\n  const frequencyModes = [\r\n    {\r\n      label: 'Every Day',\r\n      value: 'daily'\r\n    },\r\n    {\r\n      label: 'Specific Days',\r\n      value: 'specific'\r\n    },\r\n    {\r\n      label: 'Days Interval',\r\n      value: 'interval'\r\n    },\r\n  ]\r\n\r\n  const timeModes = [\r\n    {\r\n      label: 'Once a day',\r\n      value: 1\r\n    },\r\n    {\r\n      label: 'Twice a day',\r\n      value: 2\r\n    },\r\n    {\r\n      label: 'Three times a day',\r\n      value: 3\r\n    },\r\n    {\r\n      label: 'Four times a day',\r\n      value: 4\r\n    },\r\n    {\r\n      label: 'Five times a day',\r\n      value: 5\r\n    },\r\n    {\r\n      label: 'Six times a day',\r\n      value: 6\r\n    }, \r\n  ]\r\n\r\n  const [frequency, setFrequency] = useState('daily')\r\n  const [times, setTimes] = useState(1)\r\n\r\n  const [reminders, setReminders] = useState([\r\n  {\r\n    time: '08:00',\r\n    quantity: 1\r\n  }\r\n  ])\r\n\r\n  const frequencyRef = useRef()\r\n  const timeRef = useRef()\r\n\r\n  function openFrequencyRef() {\r\n    frequencyRef.current.focus()\r\n  }\r\n\r\n  function openTimesRef() {\r\n    timeRef.current.focus()\r\n  }\r\n\r\n  function closeFrequency() {\r\n    frequencyRef.current.blur()\r\n  }\r\n  \r\n  useEffect(\r\n    () => {\r\n      const updateReminderList = () => {\r\n        var doses = reminders.length\r\n        console.log('Times=', times);\r\n        if (doses < times) {\r\n          var i\r\n          for(i = doses; i < times; i++) {\r\n            setReminders( prevReminders => [...prevReminders, {time: '08:00', quantity: 1}])\r\n            console.log('i=', i);\r\n          }\r\n        } else if (doses > times) {\r\n            setReminders( prevReminders => prevReminders.slice(0, times) )\r\n        }\r\n        \r\n        console.log('Reminder list is updated now');\r\n      }\r\n\r\n      console.log('Hi');\r\n      updateReminderList()\r\n    }\r\n  , [times])\r\n\r\n  function DayChecker({day}) {\r\n    const [selected, setSelected] = useState(true)\r\n\r\n    return (\r\n      <TouchableOpacity onPress={() => setSelected(!selected)} style={styles.checkBox}>\r\n          <Text style={styles.checkText}>{day}</Text>\r\n          {selected ? <MaterialIcons name='check' size={16} /> : <></>}\r\n      </TouchableOpacity>\r\n    )\r\n  }\r\n\r\n  function ReminderModal({reminders, setReminders, reminder, idx}) {\r\n    const [openReminderModal, setOpenReminderModal] = useState(false)\r\n    const [quantity, setQuantity] = useState(reminder.quantity)\r\n\r\n    const [isDatePickerVisible, setDatePickerVisibility] = useState(false);\r\n    const [date, setDate] = useState('')\r\n    const [time, setTime] = useState(reminder.time)\r\n\r\n    const showDatePicker = () => {\r\n      setDatePickerVisibility(true);\r\n    };\r\n  \r\n    const hideDatePicker = () => {\r\n      setDatePickerVisibility(false);\r\n    };\r\n  \r\n    const handleConfirm = (day) => {\r\n      // setDate(day)\r\n      // console.log('Selected day:' , date)\r\n      // console.log(date.getTime());\r\n      // console.log(date.toTimeString());\r\n\r\n      // setTime( day.toString() )\r\n      const timestamp = day.getHours().toString() + ':' + (day.getMinutes() < 10 ?  '0' + day.getMinutes().toString() : day.getMinutes().toString())\r\n      console.log('Timestamp:', timestamp);\r\n      setTime(timestamp)\r\n      hideDatePicker();\r\n    };\r\n\r\n    const handleClickDecrementDose = () => {\r\n      // let arr = [...reminders]\r\n      // arr[idx] = {time: arr.at(idx).time, quantity: arr.at(idx).quantity - 1}\r\n      // setReminders( reminders.map( (reminder, index) => (index == idx ? {time: reminder.time, quantity: reminder.quantity - 1} : reminder)))\r\n      setQuantity(prevQuantity => prevQuantity - 1)\r\n    }\r\n\r\n    const handleClickIncrementDose = () => {\r\n      // setReminders( reminders.map( (reminder, index) => (index == idx ? {time: reminder.time, quantity: reminder.quantity + 1} : reminder)))\r\n      setQuantity(prevQuantity => prevQuantity + 1)\r\n    }\r\n\r\n    const handleClickDone = () => {\r\n      if (quantity !== reminder.quantity)\r\n        setReminders( reminders.map( (reminder, index) => (index == idx ? {time: reminder.time, quantity: quantity} : reminder)))\r\n      \r\n      // const timestamp = time.getHours().toString() + ':' + (time.getMinutes() < 10 ?  '0' + time.getMinutes().toString() : time.getMinutes().toString())\r\n      if (time !== reminder.time)\r\n        setReminders( reminders.map( (reminder, index) => (index == idx ? {time: time, quantity: reminder.quantity} : reminder)))\r\n\r\n        setOpenReminderModal(!openReminderModal)\r\n    }\r\n    \r\n    const position = (idx) => {\r\n      const pos = ['1st', '2nd', '3rd']\r\n\r\n      if (idx > 2) return (idx + 1).toString() + 'th';\r\n      else return pos[idx]\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <TouchableOpacity onPress={() => setOpenReminderModal(!openReminderModal)} style={styles.reminder}>\r\n          <Text>{position(idx)}</Text>\r\n          <Text>{reminder.time}</Text>\r\n          <Text>Take {reminder.quantity} pills</Text>\r\n        </TouchableOpacity>\r\n\r\n        <Modal transparent={true} visible={openReminderModal} animationType='fade'>\r\n          <View style={styles.modal}>\r\n            <View style={styles.modalContainer}>\r\n              <View style={styles.modalHeader}>\r\n                <Text style={{color: 'tomato', fontWeight: 'bold', fontSize: 16}} onPress={() => setOpenReminderModal(!openReminderModal)}>Cancel</Text>\r\n                <Text>Edit Time And Doses</Text>\r\n                <Text style={{color: '#53cbff', fontWeight: 'bold', fontSize: 16}} onPress={handleClickDone}>Done</Text>\r\n              </View>\r\n\r\n              <View style={{justifyContent: 'space-evenly', flex: 1}}>\r\n                <TouchableOpacity onPress={showDatePicker} style={styles.modalTime}>\r\n                  <Text>Time</Text>\r\n                  <View style={{flexDirection: 'row'}}>\r\n                    <Text>{time}</Text>\r\n                    <MaterialIcons name='arrow-right' size={20} />\r\n                  </View>\r\n                  <DateTimePicker\r\n                    isVisible={isDatePickerVisible}\r\n                    mode={'time'}\r\n                    onConfirm={handleConfirm}\r\n                    onCancel={hideDatePicker}\r\n                  />\r\n                </TouchableOpacity>\r\n                <View style={styles.modalDose}>\r\n                  <Text>Quantity</Text>\r\n                  <View style={{flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', width: 120}}>\r\n                    <TouchableOpacity disabled={quantity > 1 ? false : true} onPress={handleClickDecrementDose}>\r\n                      <MaterialCommunityIcons name='minus-circle-outline' size={28}/>\r\n                    </TouchableOpacity>\r\n                    <Text>{quantity}</Text>\r\n                    <TouchableOpacity onPress={handleClickIncrementDose}>\r\n                      <MaterialCommunityIcons name='plus-circle-outline' size={28}/>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                </View>\r\n              </View>\r\n            </View>\r\n          </View>\r\n        </Modal>\r\n        \r\n      </>\r\n      )\r\n  }\r\n\r\n  const [openToggleSwitch, setOpenToggleSwitch] = useState(false)\r\n\r\n  const [startDate, setStartDate] = useState(new Date())\r\n  const [endDate, setEndDate] = useState(null)\r\n  const [isStartDatePickerVisible, setStartDatePickerVisibility] = useState(false);\r\n  const [isEndDatePickerVisible, setEndDatePickerVisibility] = useState(false);\r\n\r\n  const showStartDatePicker = () => {\r\n    setStartDatePickerVisibility(true);\r\n  };\r\n\r\n  const hideStartDatePicker = () => {\r\n    // setStartDate(null)\r\n    setStartDatePickerVisibility(false);\r\n  };\r\n\r\n  const handleConfirmStartDate = (day) => {\r\n    setStartDate(day)\r\n    setStartDatePickerVisibility(false);\r\n  };\r\n\r\n  const showEndDatePicker = () => {\r\n    setEndDatePickerVisibility(true);\r\n  };\r\n\r\n  const hideEndDatePicker = () => {\r\n    setEndDate(null)\r\n    setEndDatePickerVisibility(false);\r\n  };\r\n\r\n  const handleConfirmEndDate = (day) => {\r\n    setEndDate(day)\r\n    setEndDatePickerVisibility(false);\r\n  };\r\n  \r\n\r\n  const handleClickAddMedication = () => {\r\n    // Write data here\r\n\r\n    setOpenAddMedication(false)\r\n  }\r\n\r\n  return (\r\n      <ScrollView style={styles.container}>\r\n\r\n          <View style={styles.headerBar}>\r\n            <TouchableOpacity onPress={() => setOpenAddMedication(false)} style={{flexDirection: 'row'}}>\r\n              {/* <MaterialIcons name='arrow-back' size={20} />\r\n              <Text>Back</Text> */}\r\n              <Text>Cancel</Text>\r\n            </TouchableOpacity>\r\n\r\n            <Text>New Medication</Text>\r\n            <TouchableOpacity onPress={handleClickAddMedication} style={{flexDirection: 'row'}}>\r\n              <Text>Done</Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n\r\n          <View style={styles.contentContainer}>\r\n            <View style={styles.boxContainer}>\r\n              <Text style={styles.boxHeaderText}>Med Info</Text>\r\n              <View style={styles.input}>\r\n                <MaterialIcons name='medical-services' size={20} />\r\n                <TextInput style={{marginLeft: 10, padding: 5}}  onChangeText={() => {}} placeholder='Medication name' />\r\n              </View>\r\n            </View>\r\n\r\n            <View style={styles.buttonBox}>\r\n              <Text style={styles.boxHeaderText}>Frequency?</Text>\r\n              <TouchableOpacity\r\n                style={styles.button}\r\n                onPress={openFrequencyRef}\r\n              >\r\n                <Text>Frequency</Text>\r\n                <Picker style={{width: 160, backgroundColor: ''}} ref={frequencyRef} onValueChange={(itemVlaue, itemIdx) => setFrequency(itemVlaue)} selectedValue={frequency}>\r\n                  {frequencyModes.map( (mode, idx) => <Picker.Item key={idx} label={mode.label} value={mode.value}/>)}\r\n                </Picker>\r\n              </TouchableOpacity>\r\n            </View>\r\n\r\n            { frequency === 'interval' ?\r\n            <View style={styles.buttonBox}>\r\n              <Text>How often?</Text>\r\n              <View style={styles.button}>\r\n                <Text>Every</Text>\r\n                <TextInput placeholder='days' keyboardType='numeric' />\r\n              </View>\r\n            </View>\r\n            :\r\n            <></>\r\n            }\r\n\r\n            <View style={styles.buttonBox}>\r\n              <Text style={styles.boxHeaderText}>How many times a day?</Text>\r\n              {/* <View style={styles.button}>\r\n                  <TextInput onChange={text => setTimes(text)} value={times}  placeholder='times' keyboardType='numeric' />\r\n                  <Text>time(s) a day</Text>\r\n              </View> */}\r\n\r\n              <TouchableOpacity\r\n                style={styles.button}\r\n                onPress={openTimesRef}\r\n              >\r\n                <Text>{times}</Text>\r\n                <Picker\r\n                  ref={timeRef}\r\n                  onValueChange={(itemValue, itemIdx) => {\r\n                    console.log('Item value is:', itemValue);\r\n                    setTimes(() => itemValue)\r\n                  }}\r\n                  selectedValue={times}\r\n                >\r\n                  {timeModes.map( (mode, idx) => <Picker.Item key={idx} label={mode.label} value={mode.value}/>)}\r\n                </Picker>\r\n              </TouchableOpacity>\r\n            </View>\r\n\r\n            <View style={styles.buttonBox}>\r\n              <Text style={styles.boxHeaderText}>Set up your reminders</Text>\r\n              <View style={{paddingHorizontal: 20}}>\r\n                { reminders.map( (reminder, idx) => <ReminderModal key={idx} reminders={reminders} setReminders={setReminders} idx={idx} reminder={reminder} />)}\r\n              </View>\r\n            </View>\r\n            \r\n            {\r\n              frequency === 'specific' ?\r\n              <View style={styles.buttonBox}>\r\n                <Text>Which days?</Text>\r\n                { dateInWeek.map( day => <DayChecker day={day}/>)}\r\n              </View>\r\n              :\r\n              <></>\r\n            }\r\n\r\n            <View style={styles.buttonBox}>\r\n              <Text style={styles.boxHeaderText}>How many pills do you have in your stock?</Text>\r\n                <View style={styles.button}>\r\n                  <Text>Pills in stock</Text>\r\n                  <TextInput placeholder='pills in stock' keyboardType='numeric' />\r\n                </View>\r\n            </View>\r\n\r\n            <View style={styles.buttonBox}>\r\n              <Text style={styles.boxHeaderText}>Refill</Text>\r\n                <View style={styles.button}>\r\n                  <Text>Refill reminder</Text>\r\n                  <ToggleSwitch\r\n                    isOn={openToggleSwitch}\r\n                    onColor='green'\r\n                    offColor='gray'\r\n                    onToggle={() => setOpenToggleSwitch(!openToggleSwitch)} />\r\n                </View>\r\n            </View>\r\n\r\n            \r\n            <View style={{flexDirection: 'row'}}>\r\n              <Text>Starts in </Text>\r\n              <Text onPress={showStartDatePicker} style={styles.dayText}>{startDate.toDateString()}</Text>\r\n              <DateTimePicker\r\n                isVisible={isStartDatePickerVisible}\r\n                mode={'date'}\r\n                onCancel={hideStartDatePicker}\r\n                onConfirm={handleConfirmStartDate}\r\n              />\r\n            </View>\r\n\r\n            <View style={{flexDirection: 'row'}}>\r\n              {endDate ? <Text>Ends in </Text>: <Text>Tap to set </Text>}\r\n              <Text  onPress={showEndDatePicker} style={styles.dayText}>{endDate ? endDate.toDateString() : 'end date'}</Text>\r\n              <DateTimePicker\r\n                isVisible={isEndDatePickerVisible}\r\n                mode={'date'}\r\n                onCancel={hideEndDatePicker}\r\n                onConfirm={handleConfirmEndDate}\r\n              />\r\n            </View>\r\n\r\n          </View>\r\n\r\n          {/* <Modal visible={openSchedule} animationType='slide'>\r\n            <FrequencyInf />\r\n          </Modal>\r\n\r\n          <Modal visible={openDetails} animationType='slide'>\r\n            <Details/>\r\n          </Modal> */}\r\n\r\n      </ScrollView>\r\n    )\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1\r\n  },\r\n  headerBar: {\r\n    height: 60,\r\n    padding: 10,\r\n    backgroundColor: '#53cbff',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between'\r\n  },\r\n  button : {\r\n    flexDirection: 'row', \r\n    flex: 1, \r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    backgroundColor: '#53cbff',\r\n    // borderRadius: 10,\r\n    paddingHorizontal: 10,\r\n    height: 60\r\n  },\r\n  reminder : {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    padding: 10,\r\n    backgroundColor: '#53cbff',\r\n    borderRadius: 10,\r\n    marginVertical: 5\r\n  },\r\n  modal : {\r\n    backgroundColor: 'rgba(52, 52, 52, 0.8)',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    flex: 1,\r\n  },\r\n  modalHeader: {\r\n      // height: 80,\r\n      flexDirection: 'row',\r\n      justifyContent: 'space-between'\r\n  },\r\n  modalContainer : {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    width: '100%',\r\n    height: '50%',\r\n    // justifyContent: '',\r\n    // backgroundColor: 'gray'\r\n    backgroundColor: 'white'\r\n  },\r\n  modalDose: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    marginTop: 10\r\n  },\r\n  modalTime : {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between'\r\n  },  \r\n  buttonBox : {\r\n    marginVertical: 10\r\n  },\r\n  boxHeaderText : {\r\n    // marginLeft: 5,\r\n    // marginTop: 5,\r\n    fontWeight: 'bold'\r\n  },\r\n  contentContainer : {\r\n    flex: 1,\r\n    // backgroundColor: '#53cbff'\r\n    // padding: 5,\r\n  },\r\n  input : {\r\n    flexDirection: 'row',\r\n    alignItems:'center',\r\n    padding: 10,\r\n    backgroundColor: '#53cbff',\r\n    height: 60\r\n    // borderRadius: 10\r\n    // color: 'white'\r\n  },\r\n  contentContainer : {\r\n    // padding: 10\r\n  },\r\n\r\n  checkBox : {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    backgroundColor: '#53cbff',\r\n    padding: 5,\r\n    borderBottomWidth: 1\r\n  },\r\n  checkText : {\r\n\r\n  },\r\n\r\n  dayText : {\r\n    fontWeight: 'bold',\r\n    color: 'tomato'\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}