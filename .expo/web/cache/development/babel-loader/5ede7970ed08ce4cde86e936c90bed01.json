{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nexport function toTimeString(day) {\n  var h = day.getHours();\n  var m = day.getMinutes();\n  var str = (h % 12 < 10 ? '0' : '') + (h % 12).toString() + ':' + (m < 10 ? '0' : '') + m.toString() + ' ' + (h <= 12 ? 'AM' : 'PM');\n  return str;\n}\nexport var updateReminder = function updateReminder(medications, setMedications, medicationId, id, document) {\n  var sort = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  var medicationDocument = medications.find(function (item) {\n    return item.id == medicationId;\n  });\n  var reminderIdx = medicationDocument.reminders.findIndex(function (item) {\n    return item.id == id;\n  });\n  var reminderDoc = medicationDocument.reminders[reminderIdx];\n  medicationDocument.reminders[reminderIdx] = _objectSpread(_objectSpread({}, reminderDoc), document);\n\n  if (sort) {\n    medicationDocument.reminders = medicationDocument.reminders.sort(function (a, b) {\n      return a.timestamp - b.timestamp;\n    });\n  }\n\n  setMedications([].concat(_toConsumableArray(medications.filter(function (item) {\n    return item.id != medicationId;\n  })), [medicationDocument]));\n};\nexport var removeReminder = function removeReminder(medications, setMedications, medicationId, id) {\n  var medicationDocument = medications.find(function (item) {\n    return item.id == medicationId;\n  });\n  medicationDocument.reminders = medicationDocument.reminders.filter(function (item) {\n    return item.id != id;\n  });\n  setMedications([].concat(_toConsumableArray(medications.filter(function (item) {\n    return item.id != medicationId;\n  })), [medicationDocument]));\n};\nexport var updateMedicationFE = function updateMedicationFE(medications, setMedications, medicationId, document) {\n  var pickedMedication = medications.find(function (item) {\n    return item.id == medicationId;\n  });\n  pickedMedication = _objectSpread(_objectSpread({}, pickedMedication), document);\n  console.log('PickedMedication = ', pickedMedication.pillsInStock);\n  setMedications(function (prev) {\n    return [].concat(_toConsumableArray(medications.filter(function (item) {\n      return item.id != medicationId;\n    })), [pickedMedication]);\n  });\n  console.log('Medications = ', medications.find(function (item) {\n    return item.id == medicationId;\n  }).pillsInStock);\n};\nexport var deleteMedicationFE = function deleteMedicationFE(medications, setMedications, medicationId) {\n  setMedications(function (prevMedications) {\n    return _toConsumableArray(prevMedications.filter(function (item) {\n      return item.id != medicationId;\n    }));\n  });\n};","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Máy tính/Projects/MediReminder/shared/Functions.js"],"names":["React","toTimeString","day","h","getHours","m","getMinutes","str","toString","updateReminder","medications","setMedications","medicationId","id","document","sort","medicationDocument","find","item","reminderIdx","reminders","findIndex","reminderDoc","a","b","timestamp","filter","removeReminder","updateMedicationFE","pickedMedication","console","log","pillsInStock","prev","deleteMedicationFE","prevMedications"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { View, Text } from 'react-native'\r\n\r\nexport function toTimeString(day) {\r\n  const h = day.getHours()\r\n  const m = day.getMinutes()\r\n\r\n  const str = (\r\n    ((h % 12) < 10 ? '0' : '')\r\n    + (h % 12).toString()\r\n    + ':'\r\n    + (m < 10 ?  '0' : '')\r\n    + m.toString()\r\n    + ' '\r\n    + (h <= 12 ? 'AM' : 'PM')\r\n  )\r\n\r\n  return str\r\n}\r\n\r\nexport const updateReminder = (medications, setMedications, medicationId, id, document, sort = false) => {\r\n    let medicationDocument = medications.find(item => item.id == medicationId)\r\n    let reminderIdx = medicationDocument.reminders.findIndex(item => item.id == id)\r\n    let reminderDoc = medicationDocument.reminders[reminderIdx]\r\n    medicationDocument.reminders[reminderIdx] = {\r\n      ...reminderDoc,\r\n      ...document\r\n    }\r\n\r\n    if (sort) {\r\n      medicationDocument.reminders = medicationDocument.reminders.sort( (a, b) => a.timestamp - b.timestamp )\r\n    }\r\n    // console.log(medicationDocument);\r\n\r\n    setMedications([...medications.filter(item => item.id != medicationId), medicationDocument])\r\n}\r\n\r\nexport const removeReminder = (medications, setMedications, medicationId, id) => {\r\n  let medicationDocument = medications.find(item => item.id == medicationId)\r\n  medicationDocument.reminders = medicationDocument.reminders.filter(item => item.id != id)\r\n\r\n  // let reminderIdx = medicationDocument.reminders.findIndex(item => item.id == id)\r\n  // let reminderDoc = medicationDocument.reminders[reminderIdx]\r\n  // medicationDocument.reminders[reminderIdx] = {\r\n  //   ...reminderDoc,\r\n  //   ...document\r\n  // }\r\n\r\n  // console.log(medicationDocument);\r\n\r\n  setMedications([...medications.filter(item => item.id != medicationId), medicationDocument])\r\n}\r\n\r\nexport const updateMedicationFE = (medications, setMedications, medicationId, document) => {\r\n  // console.log(document);\r\n  let pickedMedication = medications.find( item => item.id == medicationId )\r\n  pickedMedication = {...pickedMedication, ...document}\r\n  console.log('PickedMedication = ', pickedMedication.pillsInStock);\r\n  // console.log(pickedMedication.pillsInStock);\r\n  setMedications(prev => [...medications.filter(item => item.id != medicationId), pickedMedication])\r\n  console.log('Medications = ', medications.find(item => item.id == medicationId).pillsInStock);\r\n}\r\n\r\nexport const deleteMedicationFE = (medications, setMedications, medicationId) => {\r\n  setMedications(\r\n    prevMedications => [...prevMedications.filter( item => item.id != medicationId)]\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}