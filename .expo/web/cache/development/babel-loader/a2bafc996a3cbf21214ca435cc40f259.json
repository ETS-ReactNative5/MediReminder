{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { Picker } from '@react-native-picker/picker';\nimport DateTimePickerModal from 'react-native-modal-datetime-picker';\nimport DateTimePicker from \"react-native-modal-datetime-picker\";\nimport { useRef } from \"react\";\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport ToggleSwitch from \"toggle-switch-react-native\";\nimport { Link } from \"@react-navigation/native\";\nimport { addDoc, collection, doc, getDoc, serverTimestamp, setDoc, Timestamp, updateDoc } from \"@firebase/firestore\";\nimport { setStatusBarHidden } from \"expo-status-bar\";\nimport { useUser } from \"../Context/UserContext\";\nimport { useAuth } from \"../Context/AuthContext\";\nimport { db } from \"../firebase/Config\";\nimport { log } from \"react-native-reanimated\";\nexport default function MedicationForm(_ref) {\n  var setRefresh = _ref.setRefresh,\n      setOpenAddMedication = _ref.setOpenAddMedication,\n      addMedicationReminder = _ref.addMedicationReminder,\n      newMedication = _ref.newMedication,\n      newDate = _ref.newDate,\n      setNewMedication = _ref.setNewMedication,\n      setNewDate = _ref.setNewDate,\n      newTime = _ref.newTime,\n      setNewTime = _ref.setNewTime;\n  var pages = ['Info', 'Frequency', 'Stock'];\n\n  var _useState = useState(pages[0]),\n      _useState2 = _slicedToArray(_useState, 2),\n      page = _useState2[0],\n      setPage = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMessage = _useState4[0],\n      setErrorMessage = _useState4[1];\n\n  var _useState5 = useState('daily'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      reminderType = _useState6[0],\n      setReminderType = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      doses = _useState8[0],\n      setDoses = _useState8[1];\n\n  var _useState9 = useState(1),\n      _useState10 = _slicedToArray(_useState9, 2),\n      interval = _useState10[0],\n      setInterval = _useState10[1];\n\n  var _useState11 = useState(1),\n      _useState12 = _slicedToArray(_useState11, 2),\n      minPillsInStock = _useState12[0],\n      setMinPillsInStock = _useState12[1];\n\n  var _useAuth = useAuth(),\n      currentUser = _useAuth.currentUser,\n      medications = _useAuth.medications,\n      setMedications = _useAuth.setMedications;\n\n  var dateInWeek = ['Monday', 'Tuesday', 'Wesnesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n  var frequencyModes = [{\n    label: 'Every Day',\n    value: 'Daily'\n  }, {\n    label: 'Days Interval',\n    value: 'Interval'\n  }];\n  var timeModes = [{\n    label: 'Once a day',\n    value: 1\n  }, {\n    label: 'Twice a day',\n    value: 2\n  }, {\n    label: 'Three times a day',\n    value: 3\n  }, {\n    label: 'Four times a day',\n    value: 4\n  }, {\n    label: 'Five times a day',\n    value: 5\n  }, {\n    label: 'Six times a day',\n    value: 6\n  }];\n\n  var _useState13 = useState('Daily'),\n      _useState14 = _slicedToArray(_useState13, 2),\n      frequency = _useState14[0],\n      setFrequency = _useState14[1];\n\n  var _useState15 = useState(1),\n      _useState16 = _slicedToArray(_useState15, 2),\n      times = _useState16[0],\n      setTimes = _useState16[1];\n\n  var frequencyRef = useRef();\n  var timeRef = useRef();\n\n  function openFrequencyRef() {\n    frequencyRef.current.focus();\n  }\n\n  function openTimesRef() {\n    timeRef.current.focus();\n  }\n\n  useEffect(function () {\n    var updateReminderList = function updateReminderList() {\n      var doses = reminders.length;\n      console.log('Times=', times);\n\n      if (doses < times) {\n        var i;\n\n        var _loop = function _loop() {\n          var newReminder = {\n            hour: 8,\n            minute: 0,\n            quantity: 1,\n            note: ''\n          };\n          setReminders(function (prevReminders) {\n            return [].concat(_toConsumableArray(prevReminders), [newReminder]);\n          });\n          console.log('i=', i);\n        };\n\n        for (i = doses; i < times; i++) {\n          _loop();\n        }\n      } else if (doses > times) {\n        setReminders(function (prevReminders) {\n          return prevReminders.slice(0, times);\n        });\n      }\n\n      console.log('Reminder list is updated now');\n    };\n\n    updateReminderList();\n  }, [times]);\n\n  function DayChecker(_ref2) {\n    var day = _ref2.day;\n\n    var _useState17 = useState(true),\n        _useState18 = _slicedToArray(_useState17, 2),\n        selected = _useState18[0],\n        setSelected = _useState18[1];\n\n    return React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return setSelected(!selected);\n      },\n      style: styles.checkBox\n    }, React.createElement(Text, {\n      style: styles.checkText\n    }, day), selected ? React.createElement(MaterialIcons, {\n      name: \"check\",\n      size: 16\n    }) : React.createElement(React.Fragment, null));\n  }\n\n  function ReminderModal(_ref3) {\n    var reminders = _ref3.reminders,\n        setReminders = _ref3.setReminders,\n        reminder = _ref3.reminder,\n        idx = _ref3.idx;\n\n    var _useState19 = useState(false),\n        _useState20 = _slicedToArray(_useState19, 2),\n        openReminderModal = _useState20[0],\n        setOpenReminderModal = _useState20[1];\n\n    var _useState21 = useState(reminder.quantity),\n        _useState22 = _slicedToArray(_useState21, 2),\n        quantity = _useState22[0],\n        setQuantity = _useState22[1];\n\n    var _useState23 = useState(false),\n        _useState24 = _slicedToArray(_useState23, 2),\n        isDatePickerVisible = _useState24[0],\n        setDatePickerVisibility = _useState24[1];\n\n    var _useState25 = useState(''),\n        _useState26 = _slicedToArray(_useState25, 2),\n        date = _useState26[0],\n        setDate = _useState26[1];\n\n    var _useState27 = useState(reminder),\n        _useState28 = _slicedToArray(_useState27, 2),\n        time = _useState28[0],\n        setTime = _useState28[1];\n\n    var _useState29 = useState(''),\n        _useState30 = _slicedToArray(_useState29, 2),\n        note = _useState30[0],\n        setNote = _useState30[1];\n\n    var getTime = function getTime(item) {\n      var h = item.hour;\n      var m = item.minute;\n      var str = (h % 12 < 10 ? '0' : '') + (h % 12).toString() + ':' + (m < 10 ? '0' : '') + m.toString() + ' ' + (h <= 12 ? 'AM' : 'PM');\n      return str;\n    };\n\n    var showDatePicker = function showDatePicker() {\n      setDatePickerVisibility(true);\n    };\n\n    var hideDatePicker = function hideDatePicker() {\n      setDatePickerVisibility(false);\n    };\n\n    var handleConfirm = function handleConfirm(day) {\n      setTime(function (prevTime) {\n        return _objectSpread(_objectSpread({}, prevTime), {}, {\n          hour: day.getHours(),\n          minute: day.getMinutes()\n        });\n      });\n      hideDatePicker();\n    };\n\n    var handleClickDecrementDose = function handleClickDecrementDose() {\n      setTime(function (prevTime) {\n        return _objectSpread(_objectSpread({}, prevTime), {}, {\n          quantity: prevTime.quantity - 1\n        });\n      });\n    };\n\n    var handleClickIncrementDose = function handleClickIncrementDose() {\n      setTime(function (prevTime) {\n        return _objectSpread(_objectSpread({}, prevTime), {}, {\n          quantity: prevTime.quantity + 1\n        });\n      });\n    };\n\n    var handleClickWriteNote = function handleClickWriteNote(text) {\n      setNote(text);\n      setTime(function (prevTime) {\n        return _objectSpread(_objectSpread({}, prevTime), {}, {\n          note: note\n        });\n      });\n    };\n\n    var handleClickDone = function handleClickDone() {\n      setReminders(reminders.map(function (reminder, index) {\n        return index == idx ? time : reminder;\n      }));\n      setOpenReminderModal(!openReminderModal);\n      console.log(reminders);\n    };\n\n    var position = function position(idx) {\n      var pos = ['1st', '2nd', '3rd'];\n      if (idx > 2) return (idx + 1).toString() + 'th';else return pos[idx];\n    };\n\n    return React.createElement(React.Fragment, null, React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return setOpenReminderModal(!openReminderModal);\n      },\n      style: styles.reminder\n    }, React.createElement(Text, null, position(idx)), React.createElement(Text, null, getTime(time)), React.createElement(Text, null, \"Take \", reminder.quantity, \" pills\")), React.createElement(Modal, {\n      transparent: true,\n      visible: openReminderModal,\n      animationType: \"fade\"\n    }, React.createElement(View, {\n      style: styles.modal\n    }, React.createElement(View, {\n      style: styles.modalContainer\n    }, React.createElement(View, {\n      style: styles.modalHeader\n    }, React.createElement(Text, {\n      style: {\n        fontWeight: 'bold',\n        fontSize: 16\n      },\n      onPress: function onPress() {\n        return setOpenReminderModal(!openReminderModal);\n      }\n    }, \"Cancel\"), React.createElement(Text, {\n      style: {\n        color: 'black'\n      }\n    }, \"Edit Time And Doses\"), React.createElement(Text, {\n      style: {\n        fontWeight: 'bold',\n        fontSize: 16\n      },\n      onPress: handleClickDone\n    }, \"Done\")), React.createElement(View, {\n      style: {\n        flex: 1,\n        padding: 10\n      }\n    }, React.createElement(TouchableOpacity, {\n      onPress: showDatePicker,\n      style: styles.modalTime\n    }, React.createElement(Text, {\n      style: styles.modalText\n    }, \"Time\"), React.createElement(View, {\n      style: {\n        flexDirection: 'row'\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontSize: 20\n      }\n    }, getTime(time)), React.createElement(MaterialIcons, {\n      name: \"arrow-right\",\n      size: 28\n    })), React.createElement(DateTimePicker, {\n      isVisible: isDatePickerVisible,\n      mode: 'time',\n      onConfirm: handleConfirm,\n      onCancel: hideDatePicker\n    })), React.createElement(View, {\n      style: styles.modalDose\n    }, React.createElement(Text, {\n      style: styles.modalText\n    }, \"Doses\"), React.createElement(View, {\n      style: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      }\n    }, React.createElement(TouchableOpacity, {\n      disabled: time.quantity === 1 ? true : false,\n      onPress: handleClickDecrementDose\n    }, React.createElement(MaterialCommunityIcons, {\n      color: time.quantity === 1 ? 'gray' : 'tomato',\n      name: \"minus-box-outline\",\n      size: 40\n    })), React.createElement(Text, {\n      style: {\n        borderBottomWidth: 2,\n        fontSize: 18\n      }\n    }, time.quantity), React.createElement(TouchableOpacity, {\n      onPress: handleClickIncrementDose\n    }, React.createElement(MaterialCommunityIcons, {\n      color: \"#53cbff\",\n      name: \"plus-box-outline\",\n      size: 40\n    })))), React.createElement(View, {\n      style: styles.modalNote\n    }, React.createElement(Text, {\n      style: styles.modalText\n    }, \"Note\"), React.createElement(View, {\n      style: {\n        padding: 10,\n        height: 100,\n        borderWidth: 1,\n        borderRadius: 20\n      }\n    }, React.createElement(TextInput, {\n      defaultValue: reminder.note,\n      placeholder: \"Write your note here\",\n      textAlignVertical: \"top\",\n      multiline: true,\n      numberOfLines: 5,\n      onChangeText: handleClickWriteNote\n    }))))))));\n  }\n\n  var _useState31 = useState(true),\n      _useState32 = _slicedToArray(_useState31, 2),\n      openToggleSwitch = _useState32[0],\n      setOpenToggleSwitch = _useState32[1];\n\n  var _useState33 = useState(false),\n      _useState34 = _slicedToArray(_useState33, 2),\n      isStartDatePickerVisible = _useState34[0],\n      setStartDatePickerVisibility = _useState34[1];\n\n  var _useState35 = useState(false),\n      _useState36 = _slicedToArray(_useState35, 2),\n      isEndDatePickerVisible = _useState36[0],\n      setEndDatePickerVisibility = _useState36[1];\n\n  var showStartDatePicker = function showStartDatePicker() {\n    setStartDatePickerVisibility(true);\n  };\n\n  var hideStartDatePicker = function hideStartDatePicker() {\n    setStartDatePickerVisibility(false);\n  };\n\n  var handleConfirmStartDate = function handleConfirmStartDate(day) {\n    setErrorMessage();\n\n    if (day < new Date()) {\n      setErrorMessage('Your medication should be scheduled from today.');\n      setStartDate(new Date());\n    } else setStartDate(day);\n\n    setStartDatePickerVisibility(false);\n  };\n\n  var showEndDatePicker = function showEndDatePicker() {\n    setEndDatePickerVisibility(true);\n  };\n\n  var hideEndDatePicker = function hideEndDatePicker() {\n    setEndDate(null);\n    setEndDatePickerVisibility(false);\n  };\n\n  var handleConfirmEndDate = function handleConfirmEndDate(day) {\n    setErrorMessage();\n\n    if (day <= startDate) {\n      setErrorMessage('Your medication should be ended after the start day.');\n    } else setEndDate(day);\n\n    setEndDatePickerVisibility(false);\n  };\n\n  var handleClickDoneAddMedication = function handleClickDoneAddMedication() {\n    var createMedicationPlan;\n    return _regeneratorRuntime.async(function handleClickDoneAddMedication$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            createMedicationPlan = function createMedicationPlan() {\n              var userMedicationsRef, medicationDocument;\n              return _regeneratorRuntime.async(function createMedicationPlan$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      userMedicationsRef = collection(db, 'users', currentUser.uid.toString(), 'medications');\n                      medicationDocument = {\n                        createdAt: serverTimestamp(),\n                        name: name,\n                        pillsInStock: parseInt(pillsInStock),\n                        startDate: Timestamp.fromDate(startDate),\n                        endDate: endDate ? Timestamp.fromDate(endDate) : null,\n                        refill: refill,\n                        updatedAt: serverTimestamp()\n                      };\n                      _context3.prev = 2;\n                      _context3.next = 5;\n                      return _regeneratorRuntime.awrap(addDoc(userMedicationsRef, medicationDocument).then(function (medicationDoc) {\n                        var userMedicationRemindersRef = collection(db, 'users', currentUser.uid.toString(), 'medications', medicationDoc.id.toString(), 'reminders');\n\n                        var createMedicationReminders = function createMedicationReminders() {\n                          var plans, array, _loop2, _iterator, _step, plan;\n\n                          return _regeneratorRuntime.async(function createMedicationReminders$(_context2) {\n                            while (1) {\n                              switch (_context2.prev = _context2.next) {\n                                case 0:\n                                  plans = setUpReminders(startDate, endDate);\n                                  array = [];\n\n                                  _loop2 = function _loop2(plan) {\n                                    var reminderDocument;\n                                    return _regeneratorRuntime.async(function _loop2$(_context) {\n                                      while (1) {\n                                        switch (_context.prev = _context.next) {\n                                          case 0:\n                                            console.log('Plan:', plan);\n                                            reminderDocument = _objectSpread(_objectSpread({}, plan), {}, {\n                                              timestamp: Timestamp.fromDate(plan.timestamp),\n                                              updatedAt: Timestamp.fromDate(plan.updatedAt)\n                                            });\n                                            console.log('ReminderDocument:', reminderDocument);\n                                            _context.next = 5;\n                                            return _regeneratorRuntime.awrap(addDoc(userMedicationRemindersRef, reminderDocument).then(function (reminderDoc) {\n                                              array.push(_objectSpread(_objectSpread({}, plan), {}, {\n                                                timestamp: plan.timestamp,\n                                                updatedAt: plan.updatedAt,\n                                                id: reminderDoc.id\n                                              }));\n                                            }).catch(function (e) {\n                                              return console.log('Error in adding reminders to a medication:', e.message);\n                                            }));\n\n                                          case 5:\n                                          case \"end\":\n                                            return _context.stop();\n                                        }\n                                      }\n                                    }, null, null, null, Promise);\n                                  };\n\n                                  _iterator = _createForOfIteratorHelperLoose(plans);\n\n                                case 4:\n                                  if ((_step = _iterator()).done) {\n                                    _context2.next = 10;\n                                    break;\n                                  }\n\n                                  plan = _step.value;\n                                  _context2.next = 8;\n                                  return _regeneratorRuntime.awrap(_loop2(plan));\n\n                                case 8:\n                                  _context2.next = 4;\n                                  break;\n\n                                case 10:\n                                  setMedications(function (prevMedications) {\n                                    return [].concat(_toConsumableArray(prevMedications), [_objectSpread(_objectSpread({}, medicationDocument), {}, {\n                                      startDate: startDate,\n                                      endDate: endDate ? endDate : null,\n                                      updatedAt: new Date(),\n                                      id: medicationDoc.id,\n                                      reminders: array\n                                    })]);\n                                  });\n\n                                case 11:\n                                case \"end\":\n                                  return _context2.stop();\n                              }\n                            }\n                          }, null, null, null, Promise);\n                        };\n\n                        createMedicationReminders();\n                      }));\n\n                    case 5:\n                      _context3.next = 10;\n                      break;\n\n                    case 7:\n                      _context3.prev = 7;\n                      _context3.t0 = _context3[\"catch\"](2);\n                      console.log('Error in inserting a new medication plan:', _context3.t0.message);\n\n                    case 10:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, null, null, [[2, 7]], Promise);\n            };\n\n            createMedicationPlan();\n            setOpenAddMedication(false);\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var setUpReminders = function setUpReminders(startDate, endDate) {\n    var res = [];\n\n    if (endDate) {\n      (function () {\n        var date = new Date(startDate);\n\n        while (date < endDate) {\n          reminders.forEach(function (plan) {\n            date.setHours(plan.hour, plan.minute, 0);\n            res = [].concat(_toConsumableArray(res), [{\n              timestamp: new Date(date),\n              quantity: plan.quantity,\n              isConfirmed: false,\n              isMissed: false,\n              note: plan.note,\n              updatedAt: new Date(date)\n            }]);\n          });\n          date.setDate(date.getDate() + parseInt(interval));\n        }\n      })();\n    } else {\n      (function () {\n        var date = new Date(startDate);\n        var count = parseInt(pillsInStock);\n\n        while (count > 0) {\n          reminders.forEach(function (plan) {\n            if (count >= plan.quantity) {\n              date.setHours(plan.hour, plan.minute, 0);\n              res = [].concat(_toConsumableArray(res), [{\n                timestamp: new Date(date),\n                quantity: plan.quantity,\n                isConfirmed: false,\n                isMissed: false,\n                note: plan.note,\n                updatedAt: new Date(date)\n              }]);\n              count -= plan.quantity;\n            } else count = 0;\n          });\n          date.setDate(date.getDate() + parseInt(interval));\n        }\n      })();\n    }\n\n    return res;\n  };\n\n  var handleToggleRefill = function handleToggleRefill() {\n    setRefill(!openToggleSwitch);\n    setOpenToggleSwitch(function (prev) {\n      return !prev;\n    });\n  };\n\n  var handleCheckPillsInStock = function handleCheckPillsInStock(text) {\n    setErrorMessage();\n    var minAmount = 0;\n    reminders.forEach(function (item) {\n      return minAmount += item.quantity;\n    });\n\n    if (text == '' || parseInt(text) < minAmount) {\n      setErrorMessage(\"You should have at least \" + minAmount + \" pills\");\n    } else {\n      setPillsInStock(function (prev) {\n        return text;\n      });\n    }\n  };\n\n  var _useState37 = useState(''),\n      _useState38 = _slicedToArray(_useState37, 2),\n      name = _useState38[0],\n      setName = _useState38[1];\n\n  var _useState39 = useState('0'),\n      _useState40 = _slicedToArray(_useState39, 2),\n      pillsInStock = _useState40[0],\n      setPillsInStock = _useState40[1];\n\n  var _useState41 = useState(true),\n      _useState42 = _slicedToArray(_useState41, 2),\n      refill = _useState42[0],\n      setRefill = _useState42[1];\n\n  var _useState43 = useState(new Date()),\n      _useState44 = _slicedToArray(_useState43, 2),\n      startDate = _useState44[0],\n      setStartDate = _useState44[1];\n\n  var _useState45 = useState(null),\n      _useState46 = _slicedToArray(_useState45, 2),\n      endDate = _useState46[0],\n      setEndDate = _useState46[1];\n\n  var _useState47 = useState([{\n    hour: 8,\n    minute: 0,\n    quantity: 1,\n    note: ''\n  }]),\n      _useState48 = _slicedToArray(_useState47, 2),\n      reminders = _useState48[0],\n      setReminders = _useState48[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(ScrollView, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.headerBar\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setOpenAddMedication(false);\n    },\n    style: {\n      flexDirection: 'row'\n    }\n  }, React.createElement(MaterialIcons, {\n    name: \"arrow-back\",\n    size: 20\n  })), React.createElement(Text, null, \"Add Medicine\"), React.createElement(TouchableOpacity, {\n    onPress: name.length > 0 ? function () {\n      return setPage('Frequency');\n    } : function () {},\n    style: {\n      flexDirection: 'row'\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: name.length > 0 ? 'black' : 'gray'\n    }\n  }, \"Next\"))), React.createElement(View, {\n    style: styles.contentContainer\n  }, React.createElement(View, {\n    style: styles.boxContainer\n  }, React.createElement(Text, {\n    style: styles.boxHeaderText\n  }, \"MED INFO\"), React.createElement(View, {\n    style: styles.input\n  }, React.createElement(MaterialIcons, {\n    name: \"medical-services\",\n    size: 20\n  }), React.createElement(TextInput, {\n    style: {\n      marginLeft: 10,\n      padding: 5\n    },\n    onChangeText: function onChangeText(text) {\n      return setName(text);\n    },\n    placeholder: \"Medication name\",\n    defaultValue: name\n  })))))), React.createElement(Modal, {\n    visible: page == 'Frequency' ? true : false,\n    animationType: \"slide\"\n  }, React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(ScrollView, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.headerBar\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setPage('Info');\n    },\n    style: {\n      flexDirection: 'row'\n    }\n  }, React.createElement(MaterialIcons, {\n    name: \"arrow-back\",\n    size: 20\n  })), React.createElement(Text, null, \"Schedule\"), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setPage('Stock');\n    },\n    style: {\n      flexDirection: 'row'\n    }\n  }, React.createElement(Text, null, \"Next\"))), React.createElement(View, {\n    style: styles.contentContainer\n  }, React.createElement(View, {\n    style: styles.buttonBox\n  }, React.createElement(Text, {\n    style: styles.boxHeaderText\n  }, \"FREQUENCY\"), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: openFrequencyRef\n  }, React.createElement(Text, null, frequency), React.createElement(Picker, {\n    ref: frequencyRef,\n    onValueChange: function onValueChange(itemValue, itemIdx) {\n      return setFrequency(itemValue);\n    },\n    selectedValue: frequency\n  }, frequencyModes.map(function (mode, idx) {\n    return React.createElement(Picker.Item, {\n      key: idx,\n      label: mode.label,\n      value: mode.value\n    });\n  })))), frequency === 'Interval' ? React.createElement(View, {\n    style: styles.buttonBox\n  }, React.createElement(Text, {\n    style: styles.boxHeaderText\n  }, \"HOW OFTEN?\"), React.createElement(View, {\n    style: styles.button\n  }, React.createElement(Text, null, \"Every\"), React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      justifyContent: 'center',\n      alignItems: 'center'\n    }\n  }, React.createElement(TextInput, {\n    underlineColorAndroid: \"black\",\n    textAlign: \"center\",\n    style: {\n      marginRight: 10,\n      padding: 5\n    },\n    onChangeText: function onChangeText(text) {\n      return setInterval(text);\n    },\n    placeholder: \"2\",\n    keyboardType: \"numeric\"\n  }), React.createElement(Text, null, \"days\")))) : React.createElement(React.Fragment, null), React.createElement(View, {\n    style: styles.buttonBox\n  }, React.createElement(Text, {\n    style: styles.boxHeaderText\n  }, \"HOW MANY TIMES A DAY?\"), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: openTimesRef\n  }, React.createElement(Text, null, times), React.createElement(Picker, {\n    ref: timeRef,\n    onValueChange: function onValueChange(itemValue, itemIdx) {\n      setTimes(function () {\n        return itemValue;\n      });\n    },\n    selectedValue: times\n  }, timeModes.map(function (mode, idx) {\n    return React.createElement(Picker.Item, {\n      key: idx,\n      label: mode.label,\n      value: mode.value\n    });\n  })))), React.createElement(View, {\n    style: styles.buttonBox\n  }, React.createElement(Text, {\n    style: styles.boxHeaderText\n  }, \"SET TIME AND DOSES\"), React.createElement(View, {\n    style: {}\n  }, reminders.map(function (reminder, idx) {\n    return React.createElement(ReminderModal, {\n      key: idx,\n      reminders: reminders,\n      setReminders: setReminders,\n      idx: idx,\n      reminder: reminder\n    });\n  }))), frequency === 'Specific' ? React.createElement(View, {\n    style: styles.buttonBox\n  }, React.createElement(Text, null, \"Which days?\"), dateInWeek.map(function (day, idx) {\n    return React.createElement(DayChecker, {\n      key: idx,\n      day: day\n    });\n  })) : React.createElement(React.Fragment, null), React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    }\n  }, React.createElement(Text, null, \"Starts in \"), React.createElement(Text, {\n    onPress: showStartDatePicker,\n    style: styles.dayText\n  }, startDate.toDateString()), React.createElement(DateTimePicker, {\n    isVisible: isStartDatePickerVisible,\n    mode: 'date',\n    onCancel: hideStartDatePicker,\n    onConfirm: handleConfirmStartDate\n  })), React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    }\n  }, endDate ? React.createElement(Text, null, \"Ends in \") : React.createElement(Text, null, \"Tap to set \"), React.createElement(Text, {\n    onPress: showEndDatePicker,\n    style: styles.dayText\n  }, endDate ? endDate.toDateString() : 'end date'), React.createElement(DateTimePicker, {\n    isVisible: isEndDatePickerVisible,\n    mode: 'date',\n    onCancel: hideEndDatePicker,\n    onConfirm: handleConfirmEndDate\n  }))), errorMessage && React.createElement(Text, {\n    style: {\n      alignSelf: 'center',\n      color: 'tomato',\n      fontSize: 12\n    }\n  }, errorMessage)))), React.createElement(Modal, {\n    visible: page == 'Stock' ? true : false,\n    animationType: \"slide\"\n  }, React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(ScrollView, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.headerBar\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setPage('Frequency');\n    },\n    style: {\n      flexDirection: 'row'\n    }\n  }, React.createElement(MaterialIcons, {\n    name: \"arrow-back\",\n    size: 20\n  })), React.createElement(Text, null, \"More Details\"), React.createElement(TouchableOpacity, {\n    onPress: errorMessage ? handleClickDoneAddMedication : function () {},\n    style: {\n      flexDirection: 'row'\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: errorMessage ? 'gray' : 'black'\n    }\n  }, \"Done\"))), React.createElement(View, {\n    style: styles.contentContainer\n  }, React.createElement(View, {\n    style: styles.buttonBox\n  }, React.createElement(Text, {\n    style: styles.boxHeaderText\n  }, \"HOW MANY PILLS DO YOU HAVE?\"), React.createElement(View, {\n    style: styles.button\n  }, React.createElement(Text, null, \"Pills in stock\"), React.createElement(TextInput, {\n    textAlign: \"right\",\n    onChangeText: handleCheckPillsInStock,\n    placeholder: \"0\",\n    keyboardType: \"numeric\"\n  }))), React.createElement(View, {\n    style: styles.buttonBox\n  }, React.createElement(Text, {\n    style: styles.boxHeaderText\n  }, \"REFILL\"), React.createElement(View, {\n    style: styles.button\n  }, React.createElement(Text, null, \"Refill reminder\"), React.createElement(ToggleSwitch, {\n    isOn: openToggleSwitch,\n    onColor: \"green\",\n    offColor: \"gray\",\n    onToggle: handleToggleRefill\n  })))), errorMessage && React.createElement(Text, {\n    style: {\n      alignSelf: 'center',\n      color: 'tomato',\n      fontSize: 12\n    }\n  }, errorMessage)))));\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  headerBar: {\n    padding: 10,\n    backgroundColor: '#53cbff',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-end'\n  },\n  button: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    backgroundColor: '#53cbff',\n    borderRadius: 20,\n    paddingHorizontal: 10,\n    height: 60\n  },\n  reminder: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    padding: 10,\n    backgroundColor: '#53cbff',\n    borderRadius: 15,\n    marginVertical: 5\n  },\n  modal: {\n    backgroundColor: 'rgba(52, 52, 52, 0.8)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    backgroundColor: '#53cbff',\n    padding: 10\n  },\n  modalContainer: {\n    position: 'absolute',\n    top: '50%',\n    width: '100%',\n    height: '50%',\n    backgroundColor: 'white'\n  },\n  modalDose: {\n    justifyContent: 'space-between',\n    marginTop: 20\n  },\n  modalTime: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 10\n  },\n  modalNote: {\n    marginTop: 20\n  },\n  buttonBox: {\n    marginVertical: 10\n  },\n  boxHeaderText: {\n    marginLeft: 10,\n    marginBottom: 3,\n    fontWeight: 'bold'\n  },\n  input: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 10,\n    backgroundColor: '#53cbff',\n    height: 60,\n    borderRadius: 20\n  },\n  contentContainer: {\n    padding: 15\n  },\n  checkBox: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    backgroundColor: '#53cbff',\n    padding: 5,\n    borderBottomWidth: 1\n  },\n  checkText: {},\n  dayText: {\n    fontWeight: 'bold',\n    color: 'tomato'\n  },\n  boxContainer: {},\n  modalText: {\n    fontSize: 18\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Máy tính/Projects/MediReminder/components/MedicationForm.js"],"names":["React","useEffect","useState","MaterialIcons","Picker","DateTimePickerModal","DateTimePicker","useRef","MaterialCommunityIcons","ToggleSwitch","Link","addDoc","collection","doc","getDoc","serverTimestamp","setDoc","Timestamp","updateDoc","setStatusBarHidden","useUser","useAuth","db","log","MedicationForm","setRefresh","setOpenAddMedication","addMedicationReminder","newMedication","newDate","setNewMedication","setNewDate","newTime","setNewTime","pages","page","setPage","errorMessage","setErrorMessage","reminderType","setReminderType","doses","setDoses","interval","setInterval","minPillsInStock","setMinPillsInStock","currentUser","medications","setMedications","dateInWeek","frequencyModes","label","value","timeModes","frequency","setFrequency","times","setTimes","frequencyRef","timeRef","openFrequencyRef","current","focus","openTimesRef","updateReminderList","reminders","length","console","i","newReminder","hour","minute","quantity","note","setReminders","prevReminders","slice","DayChecker","day","selected","setSelected","styles","checkBox","checkText","ReminderModal","reminder","idx","openReminderModal","setOpenReminderModal","setQuantity","isDatePickerVisible","setDatePickerVisibility","date","setDate","time","setTime","setNote","getTime","item","h","m","str","toString","showDatePicker","hideDatePicker","handleConfirm","prevTime","getHours","getMinutes","handleClickDecrementDose","handleClickIncrementDose","handleClickWriteNote","text","handleClickDone","map","index","position","pos","modal","modalContainer","modalHeader","fontWeight","fontSize","color","flex","padding","modalTime","modalText","flexDirection","modalDose","justifyContent","alignItems","borderBottomWidth","modalNote","height","borderWidth","borderRadius","openToggleSwitch","setOpenToggleSwitch","isStartDatePickerVisible","setStartDatePickerVisibility","isEndDatePickerVisible","setEndDatePickerVisibility","showStartDatePicker","hideStartDatePicker","handleConfirmStartDate","Date","setStartDate","showEndDatePicker","hideEndDatePicker","setEndDate","handleConfirmEndDate","startDate","handleClickDoneAddMedication","createMedicationPlan","userMedicationsRef","uid","medicationDocument","createdAt","name","pillsInStock","parseInt","fromDate","endDate","refill","updatedAt","then","medicationDoc","userMedicationRemindersRef","id","createMedicationReminders","plans","setUpReminders","array","plan","reminderDocument","timestamp","reminderDoc","push","catch","e","message","prevMedications","res","forEach","setHours","isConfirmed","isMissed","getDate","count","handleToggleRefill","setRefill","prev","handleCheckPillsInStock","minAmount","setPillsInStock","setName","container","headerBar","contentContainer","boxContainer","boxHeaderText","input","marginLeft","buttonBox","button","itemValue","itemIdx","mode","marginRight","dayText","toDateString","alignSelf","StyleSheet","create","backgroundColor","paddingHorizontal","marginVertical","top","width","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { StyleSheet, View, TextInput, TouchableWithoutFeedback, Button, Text, TouchableOpacity, ScrollView, FlatList, Modal, SafeAreaView } from \"react-native\";\r\nimport { Keyboard } from \"react-native\";\r\nimport {MaterialIcons} from '@expo/vector-icons';\r\nimport {Picker} from '@react-native-picker/picker'\r\nimport DateTimePickerModal from 'react-native-modal-datetime-picker';\r\n// import DateTimePicker from '@react-native-community/datetimepicker'\r\nimport DateTimePicker from \"react-native-modal-datetime-picker\";\r\nimport { useRef } from \"react\";\r\nimport {MaterialCommunityIcons} from '@expo/vector-icons'\r\nimport ToggleSwitch from \"toggle-switch-react-native\";\r\nimport { Link } from \"@react-navigation/native\";\r\nimport { addDoc, collection, doc, getDoc, serverTimestamp, setDoc, Timestamp, updateDoc } from \"@firebase/firestore\";\r\nimport { setStatusBarHidden } from \"expo-status-bar\";\r\nimport { useUser } from \"../Context/UserContext\";\r\nimport { useAuth } from \"../Context/AuthContext\";\r\nimport { db } from \"../firebase/Config\";\r\nimport { log } from \"react-native-reanimated\";\r\n\r\nexport default function MedicationForm({setRefresh, setOpenAddMedication ,addMedicationReminder, newMedication, newDate, setNewMedication, setNewDate, newTime, setNewTime}){\r\n  // daily, specific, interval\r\n\r\n  const pages = ['Info', 'Frequency', 'Stock']\r\n  const [page, setPage] = useState(pages[0])\r\n  const [errorMessage, setErrorMessage] = useState()\r\n  \r\n  const [reminderType, setReminderType] = useState('daily');\r\n  const [doses, setDoses] = useState(0);\r\n  const [interval, setInterval] = useState(1);\r\n  const [minPillsInStock, setMinPillsInStock] = useState(1)\r\n\r\n  const { currentUser, medications, setMedications } = useAuth() \r\n\r\n\r\n  const dateInWeek = ['Monday', 'Tuesday', 'Wesnesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\r\n\r\n  const frequencyModes = [\r\n    {\r\n      label: 'Every Day',\r\n      value: 'Daily'\r\n    },\r\n    // {\r\n    //   label: 'Specific Days',\r\n    //   value: 'Specific'\r\n    // },\r\n    {\r\n      label: 'Days Interval',\r\n      value: 'Interval'\r\n    },\r\n  ]\r\n\r\n  const timeModes = [\r\n    {\r\n      label: 'Once a day',\r\n      value: 1\r\n    },\r\n    {\r\n      label: 'Twice a day',\r\n      value: 2\r\n    },\r\n    {\r\n      label: 'Three times a day',\r\n      value: 3\r\n    },\r\n    {\r\n      label: 'Four times a day',\r\n      value: 4\r\n    },\r\n    {\r\n      label: 'Five times a day',\r\n      value: 5\r\n    },\r\n    {\r\n      label: 'Six times a day',\r\n      value: 6\r\n    }, \r\n  ]\r\n\r\n  const [frequency, setFrequency] = useState('Daily')\r\n  const [times, setTimes] = useState(1)\r\n\r\n  const frequencyRef = useRef()\r\n  const timeRef = useRef()\r\n\r\n  function openFrequencyRef() {\r\n    frequencyRef.current.focus()\r\n  }\r\n\r\n  function openTimesRef() {\r\n    timeRef.current.focus()\r\n  }\r\n  \r\n  useEffect(\r\n    () => {\r\n      const updateReminderList = () => {\r\n        var doses = reminders.length\r\n        console.log('Times=', times);\r\n        if (doses < times) {\r\n          var i\r\n          for(i = doses; i < times; i++) {\r\n\r\n            const newReminder = {\r\n              hour: 8,\r\n              minute: 0,\r\n              quantity: 1,\r\n              note: ''\r\n            }\r\n\r\n            setReminders( prevReminders => [...prevReminders, newReminder])\r\n            console.log('i=', i);\r\n          }\r\n        } else if (doses > times) {\r\n            setReminders( prevReminders => prevReminders.slice(0, times) )\r\n        }\r\n        \r\n        console.log('Reminder list is updated now');\r\n      }\r\n\r\n\r\n\r\n      updateReminderList()\r\n    }\r\n  , [times])\r\n\r\n\r\n  function DayChecker({day}) {\r\n    const [selected, setSelected] = useState(true)\r\n\r\n    return (\r\n      <TouchableOpacity onPress={() => setSelected(!selected)} style={styles.checkBox}>\r\n          <Text style={styles.checkText}>{day}</Text>\r\n          {selected ? <MaterialIcons name='check' size={16} /> : <></>}\r\n      </TouchableOpacity>\r\n    )\r\n  }\r\n\r\n  function ReminderModal({reminders, setReminders, reminder, idx}) {\r\n    const [openReminderModal, setOpenReminderModal] = useState(false)\r\n    const [quantity, setQuantity] = useState(reminder.quantity)\r\n\r\n    const [isDatePickerVisible, setDatePickerVisibility] = useState(false);\r\n    const [date, setDate] = useState('')\r\n    const [time, setTime] = useState(reminder)\r\n    const [note, setNote] = useState('')\r\n\r\n    const getTime = (item) => {\r\n      const h = item.hour\r\n      const m = item.minute\r\n      const str = (\r\n        ((h % 12) < 10 ? '0' : '')\r\n        + (h % 12).toString()\r\n        + ':'\r\n        + (m < 10 ?  '0' : '')\r\n        + m.toString()\r\n        + ' '\r\n        + (h <= 12 ? 'AM' : 'PM')\r\n      )\r\n      return str\r\n    }\r\n\r\n    const showDatePicker = () => {\r\n      setDatePickerVisibility(true);\r\n    };\r\n  \r\n    const hideDatePicker = () => {\r\n      setDatePickerVisibility(false);\r\n    };\r\n  \r\n    const handleConfirm = (day) => {\r\n\r\n      setTime( prevTime => ({\r\n        ...prevTime,\r\n        hour: day.getHours(),\r\n        minute: day.getMinutes()\r\n      }))\r\n\r\n      hideDatePicker();\r\n    };\r\n\r\n    const handleClickDecrementDose = () => {\r\n      setTime( prevTime => ({...prevTime, quantity: prevTime.quantity - 1}))\r\n    }\r\n\r\n    const handleClickIncrementDose = () => {\r\n      setTime( prevTime => ({...prevTime, quantity: prevTime.quantity + 1}))\r\n    }\r\n\r\n    const handleClickWriteNote = (text) => {\r\n      setNote(text)\r\n      setTime( prevTime => ({...prevTime, note: note}))\r\n    }\r\n\r\n    const handleClickDone = () => {\r\n        setReminders( reminders.map( (reminder, index) => (index == idx ? time : reminder)))\r\n        setOpenReminderModal(!openReminderModal)\r\n        console.log(reminders);\r\n    }\r\n    \r\n    const position = (idx) => {\r\n      const pos = ['1st', '2nd', '3rd']\r\n\r\n      if (idx > 2) return (idx + 1).toString() + 'th';\r\n      else return pos[idx]\r\n    }\r\n\r\n\r\n\r\n    return (\r\n      <>\r\n        <TouchableOpacity onPress={() => setOpenReminderModal(!openReminderModal)} style={styles.reminder}>\r\n          <Text>{position(idx)}</Text>\r\n          <Text>{getTime(time)}</Text>\r\n          <Text>Take {reminder.quantity} pills</Text>\r\n        </TouchableOpacity>\r\n\r\n        <Modal transparent={true} visible={openReminderModal} animationType='fade'>\r\n          <View style={styles.modal}>\r\n            <View style={styles.modalContainer}>\r\n              <View style={styles.modalHeader}>\r\n                <Text style={{fontWeight: 'bold', fontSize: 16}} onPress={() => setOpenReminderModal(!openReminderModal)}>Cancel</Text>\r\n                <Text style={{color: 'black'}}>Edit Time And Doses</Text>\r\n                <Text style={{fontWeight: 'bold', fontSize: 16}} onPress={handleClickDone}>Done</Text>\r\n              </View>\r\n\r\n              <View style={{flex: 1, padding: 10}}>\r\n                <TouchableOpacity onPress={showDatePicker} style={styles.modalTime}>\r\n                  <Text style={styles.modalText}>Time</Text>\r\n                  <View style={{flexDirection: 'row'}}>\r\n                    <Text style={{fontSize: 20}}>{getTime(time)}</Text>\r\n                    <MaterialIcons name='arrow-right' size={28} />\r\n                  </View>\r\n                  <DateTimePicker\r\n                    isVisible={isDatePickerVisible}\r\n                    mode={'time'}\r\n                    onConfirm={handleConfirm}\r\n                    onCancel={hideDatePicker}\r\n                  />\r\n                </TouchableOpacity>\r\n\r\n                <View style={styles.modalDose}>\r\n                  <Text style={styles.modalText}>Doses</Text>\r\n                  <View style={{flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\r\n                    <TouchableOpacity\r\n                      disabled={time.quantity === 1 ? true : false} \r\n                      onPress={handleClickDecrementDose}\r\n                    >\r\n                      <MaterialCommunityIcons\r\n                        color={time.quantity === 1 ? 'gray' : 'tomato'}\r\n                        name='minus-box-outline'\r\n                        size={40}\r\n                      />\r\n                    </TouchableOpacity>\r\n\r\n                    <Text style={{borderBottomWidth: 2, fontSize: 18}}>{time.quantity}</Text>\r\n\r\n                    <TouchableOpacity\r\n                      onPress={handleClickIncrementDose}\r\n                    >\r\n                      <MaterialCommunityIcons color='#53cbff' name='plus-box-outline' size={40}/>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                </View>\r\n\r\n                <View style={styles.modalNote}>\r\n                  <Text style={styles.modalText}>Note</Text>\r\n                  <View style={{padding: 10, height: 100, borderWidth: 1, borderRadius: 20}}>\r\n                    <TextInput\r\n                      defaultValue={reminder.note}\r\n                      placeholder='Write your note here'\r\n                      textAlignVertical='top'\r\n                      multiline={true}\r\n                      numberOfLines={5}\r\n                      onChangeText={handleClickWriteNote}\r\n                    />\r\n                  </View>\r\n                </View>\r\n\r\n              </View>\r\n            </View>\r\n          </View>\r\n        </Modal>\r\n        \r\n      </>\r\n      )\r\n  }\r\n\r\n  const [openToggleSwitch, setOpenToggleSwitch] = useState(true)\r\n\r\n  const [isStartDatePickerVisible, setStartDatePickerVisibility] = useState(false);\r\n  const [isEndDatePickerVisible, setEndDatePickerVisibility] = useState(false);\r\n\r\n  const showStartDatePicker = () => {\r\n    setStartDatePickerVisibility(true);\r\n  };\r\n\r\n  const hideStartDatePicker = () => {\r\n    // setStartDate(null)\r\n    setStartDatePickerVisibility(false);\r\n  };\r\n\r\n  const handleConfirmStartDate = (day) => {\r\n    setErrorMessage()\r\n\r\n    if (day < new Date()) {\r\n      setErrorMessage('Your medication should be scheduled from today.')\r\n      setStartDate(new Date())\r\n    } else setStartDate(day)\r\n\r\n    setStartDatePickerVisibility(false);\r\n  };\r\n\r\n  const showEndDatePicker = () => {\r\n    setEndDatePickerVisibility(true);\r\n  };\r\n\r\n  const hideEndDatePicker = () => {\r\n    setEndDate(null)\r\n    setEndDatePickerVisibility(false);\r\n  };\r\n\r\n  const handleConfirmEndDate = (day) => {\r\n    setErrorMessage()\r\n\r\n    if (day <= startDate) {\r\n      setErrorMessage('Your medication should be ended after the start day.')\r\n    } else setEndDate(day)\r\n    \r\n    setEndDatePickerVisibility(false);\r\n\r\n  };\r\n\r\n  \r\n  const handleClickDoneAddMedication = async () => {\r\n\r\n    // console.log('Medication details:',medication);\r\n    // const medication = {\r\n    //   name: name,\r\n    //   pillsInStock: pillsInStock,\r\n    //   startDate: startDate,\r\n    //   endDate: endDate ? endDate : null,\r\n    //   refill: refill\r\n    // }\r\n    // console.log(medication);\r\n    // console.log('Plans details:', reminders);\r\n    // console.log('Medication plan:', setUpReminders(startDate, endDate));\r\n\r\n    const createMedicationPlan = async () => {\r\n      const userMedicationsRef = collection(db, 'users', currentUser.uid.toString(), 'medications')\r\n\r\n      const medicationDocument = {\r\n        createdAt: serverTimestamp(),\r\n        name: name,\r\n        pillsInStock: parseInt(pillsInStock),\r\n        startDate: Timestamp.fromDate(startDate),\r\n        endDate: endDate ? Timestamp.fromDate(endDate) : null,\r\n        refill: refill,\r\n        updatedAt: serverTimestamp()\r\n      }\r\n\r\n      try {\r\n        await addDoc(userMedicationsRef, medicationDocument).then( medicationDoc => {\r\n          // console.log(doc.id.toString());\r\n          // setMedications(prevMedications => [...prevMedications, {...medicationDoc, id: medicationDoc.id, reminders: []}])\r\n\r\n          const userMedicationRemindersRef = collection(db, 'users', currentUser.uid.toString(), 'medications', medicationDoc.id.toString(), 'reminders')\r\n          \r\n          const createMedicationReminders = async () => {\r\n            const plans = setUpReminders(startDate, endDate)\r\n            let array = []\r\n\r\n            for(let plan of plans) {\r\n              console.log('Plan:', plan);\r\n              const reminderDocument = {\r\n                ...plan,\r\n                timestamp: Timestamp.fromDate(plan.timestamp),\r\n                updatedAt: Timestamp.fromDate(plan.updatedAt)\r\n              }\r\n              console.log('ReminderDocument:', reminderDocument);\r\n\r\n              await addDoc(userMedicationRemindersRef, reminderDocument).then(reminderDoc => {\r\n                array.push({...plan, timestamp: plan.timestamp, updatedAt: plan.updatedAt, id: reminderDoc.id})\r\n              }).catch(e => console.log('Error in adding reminders to a medication:', e.message))\r\n            }\r\n\r\n            setMedications(prevMedications => [...prevMedications, {...medicationDocument, startDate: startDate, endDate: endDate ? endDate : null, updatedAt: new Date(),  id: medicationDoc.id, reminders: array}])\r\n          }\r\n          \r\n          createMedicationReminders()\r\n        })\r\n\r\n      } catch (error) {\r\n        console.log('Error in inserting a new medication plan:', error.message);\r\n      }\r\n    }\r\n      createMedicationPlan()\r\n      // setRefresh()\r\n      setOpenAddMedication(false)\r\n  }\r\n\r\n  const setUpReminders = (startDate, endDate) => {\r\n    let res = []\r\n\r\n    if (endDate) {\r\n      let date = new Date(startDate)\r\n  \r\n      while(date < endDate) {\r\n        reminders.forEach( plan => {\r\n          date.setHours(plan.hour, plan.minute, 0)\r\n          res = [...res, {\r\n            timestamp: new Date(date),\r\n            quantity: plan.quantity,\r\n            isConfirmed: false,\r\n            isMissed: false,\r\n            note: plan.note,\r\n            updatedAt: new Date(date)\r\n          }]\r\n        })\r\n    \r\n        date.setDate(date.getDate() + parseInt(interval))\r\n      }\r\n    } else {\r\n      let date = new Date(startDate)\r\n      let count = parseInt(pillsInStock)\r\n      while (count > 0) {\r\n        reminders.forEach( plan => {\r\n          if (count >= plan.quantity) {\r\n            date.setHours(plan.hour, plan.minute, 0)\r\n            res = [...res, {\r\n              timestamp: new Date(date),\r\n              quantity: plan.quantity,\r\n              isConfirmed: false,\r\n              isMissed: false,\r\n              note: plan.note,\r\n              updatedAt: new Date(date)\r\n            }]\r\n            count -= plan.quantity\r\n          } else count = 0\r\n        })\r\n\r\n        date.setDate(date.getDate() + parseInt(interval))\r\n      }\r\n    }\r\n  \r\n    return res\r\n  }\r\n\r\n  const handleToggleRefill = () => {\r\n    // setMedication( prevMedication => ({...prevMedication, refill: !openToggleSwitch}) )\r\n    setRefill(!openToggleSwitch)\r\n    setOpenToggleSwitch(prev => !prev)\r\n  }\r\n\r\n  const handleCheckPillsInStock = (text) => {\r\n\r\n    setErrorMessage()\r\n    \r\n    let minAmount = 0\r\n    reminders.forEach( item => minAmount += item.quantity)\r\n\r\n    if (text == '' ||  parseInt(text) < minAmount) {\r\n      setErrorMessage(`You should have at least ${minAmount} pills`)\r\n    } else {\r\n      setPillsInStock(prev => text)\r\n    }\r\n  }\r\n\r\n  const [name, setName] = useState('')\r\n  const [pillsInStock, setPillsInStock] = useState('0')\r\n  const [refill, setRefill] = useState(true)\r\n  const [startDate, setStartDate] = useState(new Date())\r\n  const [endDate, setEndDate] = useState(null)\r\n  const [reminders, setReminders] = useState([\r\n    {\r\n      hour: 8,\r\n      minute: 0,\r\n      quantity: 1,\r\n      note: ''\r\n    }\r\n    ])\r\n\r\n  return (\r\n    <>\r\n    {/* Med Info */}\r\n    <SafeAreaView style={{flex: 1}}>\r\n      <ScrollView style={styles.container}>\r\n          <View style={styles.headerBar}>\r\n            <TouchableOpacity onPress={() => setOpenAddMedication(false)} style={{flexDirection: 'row'}}>\r\n              <MaterialIcons name='arrow-back' size={20} />\r\n              {/* <Text>Back</Text> */}\r\n              {/* <Text>Cancel</Text> */}\r\n            </TouchableOpacity>\r\n\r\n            <Text>Add Medicine</Text>\r\n            <TouchableOpacity onPress={name.length > 0 ? () => setPage('Frequency') : () => {}} style={{flexDirection: 'row'}}>\r\n              <Text style={{color: name.length > 0 ? 'black' : 'gray'}}>Next</Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n\r\n          <View style={styles.contentContainer}>\r\n            <View style={styles.boxContainer}>\r\n              <Text style={styles.boxHeaderText}>MED INFO</Text>\r\n              <View style={styles.input}>\r\n                <MaterialIcons name='medical-services' size={20} />\r\n                <TextInput\r\n                  style={{marginLeft: 10, padding: 5}}\r\n                  // onChangeText={text => setMedication( prevMedication => ({...prevMedication, name: text}))}\r\n                  // textAlign='right'\r\n                  onChangeText={text => setName(text)}\r\n                  placeholder='Medication name'\r\n                  defaultValue={name}\r\n                />\r\n              </View>\r\n            </View>\r\n          </View>\r\n      </ScrollView>\r\n    </SafeAreaView>\r\n\r\n      {/* Frequency*/}\r\n      <Modal\r\n        visible={page == 'Frequency' ? true : false}\r\n        animationType='slide'\r\n      >\r\n        <SafeAreaView style={{flex: 1}}>\r\n        <ScrollView style={styles.container}>\r\n            <View style={styles.headerBar}>\r\n              <TouchableOpacity onPress={() => setPage('Info')} style={{flexDirection: 'row'}}>\r\n                <MaterialIcons name='arrow-back' size={20} />\r\n                {/* <Text>Back</Text> */}\r\n                {/* <Text>Cancel</Text> */}\r\n              </TouchableOpacity>\r\n\r\n              <Text>Schedule</Text>\r\n              <TouchableOpacity onPress={() => setPage('Stock')} style={{flexDirection: 'row'}}>\r\n                <Text>Next</Text>\r\n                {/* <MaterialIcons name='arrow-forward' size={20}/> */}\r\n              </TouchableOpacity>\r\n            </View>\r\n\r\n            <View style={styles.contentContainer}>\r\n\r\n              <View style={styles.buttonBox}>\r\n                <Text style={styles.boxHeaderText}>FREQUENCY</Text>\r\n                <TouchableOpacity\r\n                  style={styles.button}\r\n                  onPress={openFrequencyRef}\r\n                >\r\n                  <Text>{frequency}</Text>\r\n                  <Picker \r\n                    ref={frequencyRef}\r\n                    onValueChange={(itemValue, itemIdx) => setFrequency(itemValue)} \r\n                    selectedValue={frequency}\r\n                  >\r\n                    {frequencyModes.map( (mode, idx) => <Picker.Item key={idx} label={mode.label} value={mode.value}/>)}\r\n                  </Picker>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              { frequency === 'Interval' ?\r\n              <View style={styles.buttonBox}>\r\n                <Text style={styles.boxHeaderText}>HOW OFTEN?</Text>\r\n                <View style={styles.button}>\r\n                  <Text>Every</Text>\r\n                  <View style={{flexDirection: 'row', justifyContent: 'center', alignItems: 'center'}}>\r\n                    <TextInput\r\n                      underlineColorAndroid='black'\r\n                      textAlign='center'\r\n                      style={{marginRight: 10, padding: 5}}\r\n                      onChangeText={text => setInterval(text)}\r\n                      placeholder='2'\r\n                      keyboardType='numeric'\r\n                    />\r\n                    <Text>days</Text>\r\n                  </View>\r\n                </View>\r\n              </View>\r\n              :\r\n              <></>\r\n              }\r\n\r\n              <View style={styles.buttonBox}>\r\n                <Text style={styles.boxHeaderText}>HOW MANY TIMES A DAY?</Text>\r\n                <TouchableOpacity\r\n                  style={styles.button}\r\n                  onPress={openTimesRef}\r\n                >\r\n                  <Text>{times}</Text>\r\n                  <Picker\r\n                    ref={timeRef}\r\n                    onValueChange={(itemValue, itemIdx) => {\r\n                      // console.log('Item value is:', itemValue);\r\n                      setTimes(() => itemValue)\r\n                    }}\r\n                    selectedValue={times}\r\n                  >\r\n                    {timeModes.map( (mode, idx) => <Picker.Item key={idx} label={mode.label} value={mode.value}/>)}\r\n                  </Picker>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              <View style={styles.buttonBox}>\r\n                <Text style={styles.boxHeaderText}>SET TIME AND DOSES</Text>\r\n                <View style={{}}>\r\n                  { reminders.map( (reminder, idx) => <ReminderModal key={idx} reminders={reminders} setReminders={setReminders} idx={idx} reminder={reminder} />)}\r\n                </View>\r\n              </View>\r\n              \r\n              {\r\n                frequency === 'Specific' ?\r\n                <View style={styles.buttonBox}>\r\n                  <Text>Which days?</Text>\r\n                  { dateInWeek.map( (day,idx) => <DayChecker key={idx} day={day}/>)}\r\n                </View>\r\n                :\r\n                <></>\r\n              }\r\n\r\n               <View style={{flexDirection: 'row'}}>\r\n                <Text>Starts in </Text>\r\n                <Text onPress={showStartDatePicker} style={styles.dayText}>{startDate.toDateString()}</Text>\r\n                <DateTimePicker\r\n                  isVisible={isStartDatePickerVisible}\r\n                  mode={'date'}\r\n                  onCancel={hideStartDatePicker}\r\n                  onConfirm={handleConfirmStartDate}\r\n                />\r\n              </View>\r\n\r\n              <View style={{flexDirection: 'row'}}>\r\n                {endDate ? <Text>Ends in </Text>: <Text>Tap to set </Text>}\r\n                <Text  onPress={showEndDatePicker} style={styles.dayText}>{endDate ? endDate.toDateString() : 'end date'}</Text>\r\n                <DateTimePicker\r\n                  isVisible={isEndDatePickerVisible}\r\n                  mode={'date'}\r\n                  onCancel={hideEndDatePicker}\r\n                  onConfirm={handleConfirmEndDate}\r\n                />\r\n              </View>\r\n\r\n            </View>\r\n            {errorMessage && <Text style={{alignSelf: 'center', color: 'tomato', fontSize: 12}}>{errorMessage}</Text>}\r\n        </ScrollView>\r\n        </SafeAreaView>\r\n      </Modal>\r\n\r\n      {/* Stock modal */}\r\n      <Modal\r\n        visible={page == 'Stock' ? true : false}\r\n        animationType='slide'\r\n      >\r\n      <SafeAreaView style={{flex: 1}}>\r\n        <ScrollView style={styles.container}>\r\n            <View style={styles.headerBar}>\r\n              <TouchableOpacity onPress={() => setPage('Frequency')} style={{flexDirection: 'row'}}>\r\n                <MaterialIcons name='arrow-back' size={20} />\r\n                {/* <Text>Back</Text> */}\r\n                {/* <Text>Cancel</Text> */}\r\n              </TouchableOpacity>\r\n\r\n              <Text>More Details</Text>\r\n              <TouchableOpacity onPress={errorMessage ? handleClickDoneAddMedication : () => {}} style={{flexDirection: 'row'}}>\r\n                <Text style={{color: errorMessage ? 'gray' : 'black'}}>Done</Text>\r\n                {/* <MaterialIcons name='arrow-forward' size={20}/> */}\r\n              </TouchableOpacity>\r\n            </View>\r\n\r\n            <View style={styles.contentContainer}>\r\n            <View style={styles.buttonBox}>\r\n              <Text style={styles.boxHeaderText}>HOW MANY PILLS DO YOU HAVE?</Text>\r\n                <View style={styles.button}>\r\n                  <Text>Pills in stock</Text>\r\n                  <TextInput\r\n                    // defaultValue={'0'}\r\n                    textAlign='right'\r\n                    onChangeText={handleCheckPillsInStock}\r\n                    placeholder='0'\r\n                    keyboardType='numeric'\r\n                    // onChange={handleCheckPillsInStock}\r\n                  />\r\n                </View>\r\n            </View>\r\n\r\n            <View style={styles.buttonBox}>\r\n              <Text style={styles.boxHeaderText}>REFILL</Text>\r\n                <View style={styles.button}>\r\n                  <Text>Refill reminder</Text>\r\n                  <ToggleSwitch\r\n                    isOn={openToggleSwitch}\r\n                    onColor='green'\r\n                    offColor='gray'\r\n                    onToggle={handleToggleRefill}\r\n                  />\r\n                </View>\r\n            </View>\r\n\r\n            </View>\r\n            {errorMessage && <Text style={{alignSelf: 'center', color: 'tomato', fontSize: 12}}>{errorMessage}</Text>}\r\n        </ScrollView>\r\n      </SafeAreaView>\r\n      </Modal>\r\n\r\n    </>\r\n    )\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1\r\n  },\r\n  headerBar: {\r\n    // height: 50,\r\n    padding: 10,\r\n    backgroundColor: '#53cbff',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'flex-end'\r\n  },\r\n  button : {\r\n    flexDirection: 'row', \r\n    // flex: 1, \r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    backgroundColor: '#53cbff',\r\n    borderRadius: 20,\r\n    paddingHorizontal: 10,\r\n    height: 60\r\n  },\r\n  reminder : {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    padding: 10,\r\n    backgroundColor: '#53cbff',\r\n    borderRadius: 15,\r\n    marginVertical: 5\r\n  },\r\n  modal : {\r\n    backgroundColor: 'rgba(52, 52, 52, 0.8)',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    flex: 1,\r\n  },\r\n  modalHeader: {\r\n      // height: 80,\r\n      flexDirection: 'row',\r\n      justifyContent: 'space-between',\r\n      backgroundColor: '#53cbff',\r\n      // borderBottomWidth: 1,\r\n      padding: 10\r\n  },\r\n  modalContainer : {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    width: '100%',\r\n    height: '50%',\r\n    // justifyContent: '',\r\n    // backgroundColor: 'gray'\r\n    backgroundColor: 'white',\r\n    // padding: 10\r\n  },\r\n  modalDose: {\r\n    // flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    marginTop: 20,\r\n    // flex: 1\r\n  },\r\n  modalTime : {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    marginTop: 10\r\n  },\r\n  modalNote: {\r\n    marginTop: 20\r\n  }, \r\n  buttonBox : {\r\n    marginVertical: 10\r\n  },\r\n  boxHeaderText : {\r\n    marginLeft: 10,\r\n    marginBottom: 3,\r\n    fontWeight: 'bold'\r\n  },\r\n  input : {\r\n    flexDirection: 'row',\r\n    alignItems:'center',\r\n    padding: 10,\r\n    backgroundColor: '#53cbff',\r\n    height: 60,\r\n    borderRadius: 20,\r\n    // justifyContent: 'space-between'\r\n    // color: 'white'\r\n  },\r\n  contentContainer : {\r\n    padding: 15\r\n  },\r\n\r\n  checkBox : {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    backgroundColor: '#53cbff',\r\n    padding: 5,\r\n    borderBottomWidth: 1\r\n  },\r\n  checkText : {\r\n\r\n  },\r\n\r\n  dayText : {\r\n    fontWeight: 'bold',\r\n    color: 'tomato'\r\n  },\r\n  boxContainer: {\r\n    // borderRadius: 10\r\n  },\r\n  modalText: {\r\n    fontSize: 18\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}