{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"title\", \"description\"],\n    _excluded2 = [\"title\", \"description\"];\nimport React, { useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport BarHeader from \"../shared/BarHeader\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { waitForPendingWrites } from \"@firebase/firestore\";\nimport ToggleSwitch from 'toggle-switch-react-native';\nimport { useAuth } from \"../Context/AuthContext\";\nexport default function SettingScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useAuth = useAuth(),\n      signout = _useAuth.signout;\n\n  var OptionButton = function OptionButton(_ref2) {\n    var title = _ref2.title,\n        description = _ref2.description,\n        rest = _objectWithoutProperties(_ref2, _excluded);\n\n    return React.createElement(TouchableOpacity, _extends({}, rest, {\n      style: styles.button\n    }), React.createElement(View, null, React.createElement(Text, {\n      style: styles.functionText\n    }, title, \" \"), React.createElement(Text, {\n      style: styles.descriptionText\n    }, description)), React.createElement(MaterialIcons, {\n      color: '#dcdcdc',\n      name: \"chevron-right\",\n      size: 28\n    }));\n  };\n\n  var ToggleSwitchButton = function ToggleSwitchButton(_ref3) {\n    var title = _ref3.title,\n        description = _ref3.description,\n        rest = _objectWithoutProperties(_ref3, _excluded2);\n\n    var _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        openToggleSwitch = _useState2[0],\n        setOpenToggleSwitch = _useState2[1];\n\n    return React.createElement(TouchableOpacity, {\n      onPress: function onPress() {},\n      style: styles.button\n    }, React.createElement(View, null, React.createElement(Text, {\n      style: styles.functionText\n    }, title), React.createElement(Text, {\n      style: styles.descriptionText\n    }, description)), React.createElement(ToggleSwitch, {\n      isOn: openToggleSwitch,\n      onColor: \"green\",\n      offColor: \"gray\",\n      onToggle: function onToggle() {\n        return setOpenToggleSwitch(!openToggleSwitch);\n      }\n    }));\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(BarHeader, {\n    navigation: navigation,\n    header: 'Settings'\n  }), React.createElement(ScrollView, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.block\n  }, React.createElement(Text, {\n    style: styles.blockHeader\n  }, \"NOTIFICATION SETUP\"), React.createElement(OptionButton, {\n    title: \"Snooze time\",\n    description: \"\"\n  }), React.createElement(OptionButton, {\n    title: \"Medtones\",\n    description: \"\"\n  })), React.createElement(View, {\n    style: styles.block\n  }, React.createElement(Text, {\n    style: styles.blockHeader\n  }, \"BACKGROUND\"), React.createElement(ToggleSwitchButton, {\n    title: \"Dark mode\",\n    description: \"\"\n  })), React.createElement(View, {\n    style: styles.block\n  }, React.createElement(Text, {\n    style: styles.blockHeader\n  }, \"PREMIUM SETTINGS\"), React.createElement(OptionButton, {\n    title: \"Upgrade to Premium\"\n  })), React.createElement(View, {\n    style: styles.block\n  }, React.createElement(Text, {\n    style: styles.blockHeader\n  }, \"ACCOUNT\"), React.createElement(OptionButton, {\n    title: \"Manage Account\",\n    description: \"\"\n  }), React.createElement(OptionButton, {\n    title: \"Language\",\n    description: \"\"\n  }), React.createElement(OptionButton, {\n    title: \"About\"\n  }), React.createElement(OptionButton, {\n    title: \"Sign out\",\n    onPress: function onPress() {\n      return signout();\n    }\n  }))));\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  block: {\n    backgroundColor: 'black'\n  },\n  blockHeader: {\n    color: '#dcdcdc',\n    fontWeight: '600',\n    paddingHorizontal: 5,\n    paddingVertical: 10\n  },\n  button: {\n    borderColor: 'gray',\n    borderTopWidth: 2,\n    borderBottomWidth: 2,\n    flexDirection: 'row',\n    backgroundColor: '#696969',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 5\n  },\n  functionText: {\n    fontSize: 20,\n    fontWeight: \"700\",\n    color: 'white'\n  },\n  descriptionText: {\n    fontSize: 12,\n    color: '#dcdcdc'\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Máy tính/Projects/MediReminder/screens/SettingScreen.js"],"names":["React","useState","BarHeader","MaterialIcons","waitForPendingWrites","ToggleSwitch","useAuth","SettingScreen","navigation","signout","OptionButton","title","description","rest","styles","button","functionText","descriptionText","ToggleSwitchButton","openToggleSwitch","setOpenToggleSwitch","flex","container","block","blockHeader","StyleSheet","create","backgroundColor","color","fontWeight","paddingHorizontal","paddingVertical","borderColor","borderTopWidth","borderBottomWidth","flexDirection","alignItems","justifyContent","padding","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { ScrollView, StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\r\nimport BarHeader from \"../shared/BarHeader\";\r\nimport {MaterialIcons} from '@expo/vector-icons';\r\nimport { waitForPendingWrites } from \"@firebase/firestore\";\r\nimport ToggleSwitch from 'toggle-switch-react-native';\r\nimport { useAuth } from \"../Context/AuthContext\";\r\n\r\nexport default function SettingScreen({navigation}){\r\n    const { signout } = useAuth()\r\n\r\n    const OptionButton = ({title, description, ...rest}) => {\r\n        return (\r\n            <TouchableOpacity\r\n                {...rest}\r\n                style={styles.button}\r\n            >\r\n                <View>\r\n                    <Text style={styles.functionText}>{title} </Text>\r\n                    <Text style={styles.descriptionText}>{description}</Text>\r\n                </View>\r\n                <MaterialIcons color={'#dcdcdc'} name='chevron-right' size={28} />\r\n            </TouchableOpacity>\r\n        )\r\n    }\r\n\r\n    const ToggleSwitchButton = ({title, description, ...rest}) => {\r\n        const [openToggleSwitch, setOpenToggleSwitch] = useState(false);\r\n\r\n        return (\r\n            <TouchableOpacity\r\n            onPress={() => {}}\r\n            style={styles.button}\r\n            >\r\n                <View>\r\n                    <Text style={styles.functionText}>{title}</Text>\r\n                    <Text style={styles.descriptionText}>{description}</Text>\r\n                </View>\r\n\r\n                <ToggleSwitch\r\n                    isOn={openToggleSwitch}\r\n                    onColor='green'\r\n                    offColor='gray'\r\n                    onToggle={() => setOpenToggleSwitch(!openToggleSwitch)}\r\n                />\r\n            </TouchableOpacity>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <View style={{flex: 1}}>\r\n            <BarHeader navigation={navigation} header={'Settings'}/>\r\n\r\n            <ScrollView style={styles.container}>\r\n                <View style={styles.block}>\r\n                    <Text style={styles.blockHeader}>NOTIFICATION SETUP</Text>\r\n                    <OptionButton title='Snooze time' description=''/>\r\n                    <OptionButton title='Medtones' description=''/>\r\n                </View>\r\n\r\n                <View style={styles.block}>\r\n                    <Text style={styles.blockHeader}>BACKGROUND</Text>\r\n                    <ToggleSwitchButton title='Dark mode' description='' />\r\n                </View>\r\n\r\n                <View style={styles.block}>\r\n                    <Text style={styles.blockHeader}>PREMIUM SETTINGS</Text>\r\n                    <OptionButton title='Upgrade to Premium' />\r\n                </View>\r\n\r\n                <View style={styles.block}>\r\n                    <Text style={styles.blockHeader}>ACCOUNT</Text>\r\n                    <OptionButton title='Manage Account' description=''/>\r\n                    <OptionButton title='Language' description=''/>\r\n                    <OptionButton title='About' />\r\n\r\n                    <OptionButton title='Sign out' onPress={() => signout()}/>\r\n                </View>\r\n            </ScrollView>\r\n        </View>\r\n    )\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1\r\n    },\r\n    block : {\r\n        backgroundColor: 'black'\r\n    },\r\n    blockHeader : {\r\n        color: '#dcdcdc',\r\n        fontWeight: '600',\r\n        paddingHorizontal: 5,\r\n        paddingVertical: 10\r\n    },\r\n    button: {\r\n        borderColor: 'gray',\r\n        borderTopWidth: 2,\r\n        borderBottomWidth: 2,\r\n        flexDirection: 'row',\r\n        backgroundColor: '#696969',\r\n        alignItems: 'center',\r\n        justifyContent:'space-between',\r\n        padding: 5,\r\n    },\r\n    functionText: {\r\n        fontSize: 20,\r\n        fontWeight: \"700\",\r\n        color: 'white'\r\n    },\r\n    descriptionText : {\r\n        fontSize: 12,\r\n        color: '#dcdcdc'\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}