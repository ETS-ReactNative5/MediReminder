{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged } from \"@firebase/auth\";\nimport { useState, useReducer, useContext, useEffect, createContext } from \"react\";\nimport React from \"react\";\nimport { auth, db } from \"../firebase/Config\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { addDoc, collection, doc, getDoc, serverTimestamp, setDoc } from \"@firebase/firestore\";\nvar AuthContext = createContext();\nexport function useAuth() {\n  return useContext(AuthContext);\n}\nexport function AuthProvider(_ref) {\n  var children = _ref.children;\n  var usersRef = collection(db, 'users');\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      userDoc = _useState2[0],\n      setUserDoc = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentUser = _useState4[0],\n      setCurrentUser = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var initialState = {\n    isLoading: true,\n    isSignOut: false,\n    userToken: null\n  };\n\n  var reduce = function reduce(prevState, action) {\n    switch (action.type) {\n      case 'RESTORE_TOKEN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case 'SIGN_IN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.token,\n          isSignOut: false\n        });\n\n      case 'SIGN_OUT':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: null,\n          isSignOut: true\n        });\n    }\n  };\n\n  var _useReducer = useReducer(reduce, initialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  function login(email, password) {\n    return _regeneratorRuntime.async(function login$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(signInWithEmailAndPassword(auth, email, password).then(function (userCredentials) {\n              var userInf = userCredentials.user;\n              dispatch({\n                type: 'SIGN_IN',\n                token: 'dummy-auth-token'\n              });\n            }).catch(function (error) {\n              Alert.alert('Error', 'Invalid email/password.');\n              console.log('Error in signing in', error.message);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function signup(email, password, confirmedPassword) {\n    return _regeneratorRuntime.async(function signup$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (password != '' && password === confirmedPassword) {\n              createUserWithEmailAndPassword(auth, email, password).then(function (userCredentials) {\n                var user = userCredentials.user;\n\n                var createAccount = function createAccount() {\n                  return _regeneratorRuntime.async(function createAccount$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.next = 2;\n                          return _regeneratorRuntime.awrap(setDoc(doc(db, 'users', user.uid.toString()), {\n                            createdAt: serverTimestamp()\n                          }));\n\n                        case 2:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                };\n\n                createAccount();\n                dispatch({\n                  type: 'SIGN_IN',\n                  token: 'dummy-auth-token'\n                });\n              }).catch(function (error) {\n                console.log('Error in signing up a new user', error.message);\n              });\n            } else {\n              Alert.alert('Error', 'Your password is different from your confirmed password');\n            }\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function signout() {\n    signOut(auth);\n    dispatch({\n      type: 'SIGN_OUT'\n    });\n  }\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      info = _useState8[0],\n      setInfo = _useState8[1];\n\n  useEffect(function () {\n    try {\n      var unsubcribe = onAuthStateChanged(auth, function (user) {\n        setCurrentUser(user);\n        setLoading(false);\n      });\n      return unsubcribe;\n    } catch (e) {\n      console.log('Error in auth state changed:', e.message);\n    }\n  }, []);\n  var value = {\n    state: state,\n    currentUser: currentUser,\n    userDoc: userDoc,\n    info: info,\n    login: login,\n    signup: signup,\n    signout: signout\n  };\n  return React.createElement(AuthContext.Provider, {\n    value: value\n  }, !loading && children);\n}","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Máy tính/Projects/MediReminder/Context/AuthContext.js"],"names":["signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","onAuthStateChanged","useState","useReducer","useContext","useEffect","createContext","React","auth","db","addDoc","collection","doc","getDoc","serverTimestamp","setDoc","AuthContext","useAuth","AuthProvider","children","usersRef","userDoc","setUserDoc","currentUser","setCurrentUser","loading","setLoading","initialState","isLoading","isSignOut","userToken","reduce","prevState","action","type","token","state","dispatch","login","email","password","then","userCredentials","userInf","user","catch","error","Alert","alert","console","log","message","signup","confirmedPassword","createAccount","uid","toString","createdAt","signout","info","setInfo","unsubcribe","e","value"],"mappings":"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","sourcesContent":["import { signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged } from \"@firebase/auth\";\r\nimport {useState, useReducer, useContext, useEffect, createContext } from \"react\";\r\nimport React from \"react\";\r\nimport { auth, db } from \"../firebase/Config\";\r\nimport { Alert } from \"react-native\";\r\nimport { addDoc, collection, doc, getDoc, serverTimestamp, setDoc } from \"@firebase/firestore\";\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n    return useContext(AuthContext)\r\n}\r\n\r\nexport function AuthProvider({children}) {\r\n\r\n    const usersRef = collection(db, 'users')\r\n    const [userDoc, setUserDoc] = useState()\r\n\r\n    const [currentUser,setCurrentUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const initialState = {\r\n        isLoading: true,\r\n        isSignOut: false,\r\n        userToken: null,\r\n    }\r\n    \r\n    const reduce = (prevState, action) => {\r\n        switch (action.type) {\r\n          case 'RESTORE_TOKEN' :\r\n            return {\r\n              ...prevState,\r\n              userToken: action.token,\r\n              isLoading: false,\r\n            };\r\n    \r\n            case 'SIGN_IN' :\r\n              return {\r\n                ...prevState,\r\n                userToken: action.token,\r\n                isSignOut: false,\r\n              };\r\n    \r\n            case 'SIGN_OUT' :\r\n            return {\r\n              ...prevState,\r\n              userToken: null,\r\n              isSignOut: true,\r\n            };\r\n        }\r\n    }\r\n    \r\n    const [state, dispatch] = useReducer(reduce, initialState);\r\n\r\n    async function login(email, password) {\r\n        await signInWithEmailAndPassword(auth, email, password)\r\n        .then( userCredentials =>{\r\n          const userInf = userCredentials.user;\r\n\r\n          // setCurrentUser(userCredentials)\r\n\r\n          // console.log('User id at App is:', userInf.uid);\r\n          dispatch({type: 'SIGN_IN', token: 'dummy-auth-token'});\r\n\r\n        })\r\n        .catch(error => {\r\n          Alert.alert('Error', 'Invalid email/password.')\r\n          console.log('Error in signing in', error.message);\r\n        })\r\n    }\r\n\r\n    async function signup(email, password, confirmedPassword) {\r\n        if (password != '' && password === confirmedPassword) {\r\n            // await createUserWithEmailAndPassword(auth, email, password)\r\n\r\n            createUserWithEmailAndPassword(auth, email, password)\r\n            .then( userCredentials => {\r\n              const user = userCredentials.user\r\n\r\n              const createAccount = async () => {\r\n                await setDoc(doc(db, 'users', user.uid.toString()), {\r\n                  createdAt: serverTimestamp()\r\n                })\r\n              }\r\n\r\n              createAccount()\r\n\r\n              // setCurrentUser(user)\r\n              // setUserDoc(doc(db, 'users', user.uid.toString()))\r\n\r\n              // const assignInfo = async (data) => {\r\n              //     const docRef = doc(db, 'users', userCredentials.user.uid)\r\n              //     try {\r\n              //       setDoc(docRef, { info: data})\r\n              //     } catch (e) {\r\n              //       console.log('Error in inserting user\\'s info', e.message);\r\n              //     }\r\n              // }\r\n\r\n              // assignInfo(info);\r\n\r\n              // console.log('A new user has signed up');\r\n              \r\n              dispatch({type: 'SIGN_IN', token: 'dummy-auth-token'})\r\n            })\r\n            .catch (error => {\r\n              console.log('Error in signing up a new user', error.message);\r\n            })\r\n          } else {\r\n            Alert.alert('Error', 'Your password is different from your confirmed password')\r\n          }\r\n    }\r\n\r\n    function signout() {\r\n        signOut(auth)\r\n        dispatch({type: 'SIGN_OUT'})\r\n    }\r\n\r\n    const [info, setInfo] = useState({})\r\n\r\n    useEffect(() => {\r\n        try {\r\n          const unsubcribe = onAuthStateChanged(auth, user => {\r\n            setCurrentUser(user)\r\n\r\n          //   const getUserInfo = async () => {\r\n          //     const userData = await getDoc(doc(db, 'users', user.uid))\r\n          //     const profile = userData.data().info\r\n          //     // console.log(profile);\r\n          //     setInfo(prevProfile => profile)\r\n          //     // console.log(info);\r\n          // }\r\n\r\n          // getUserInfo()\r\n\r\n            // setUserDoc( doc(db, 'users', user.uid.toString()))\r\n            // console.log(userDoc);\r\n            setLoading(false);\r\n          })\r\n\r\n          return unsubcribe\r\n          // return () => setCurrentUser(null)\r\n        } catch (e) {\r\n          console.log('Error in auth state changed:', e.message);\r\n        }\r\n    }, [])\r\n\r\n//   useEffect(\r\n//     () => {\r\n//       const bootstrapAsync = async () => {\r\n//         let userToken;\r\n\r\n//         setTimeout(\r\n//           () => dispatch({type: 'RESTORE_TOKEN', token: userToken})\r\n//         , 3000)\r\n//         // dispatch({type: 'RESTORE_TOKEN', token: userToken});\r\n//       }\r\n//       console.log('App renders');\r\n\r\n//       return bootstrapAsync();\r\n//     }\r\n//   , [])\r\n\r\n//   const [count, setCount] = useState(0);\r\n//   const [userId, setUserId] = useState(null);\r\n//   const usersRef = collection(db, 'users');\r\n\r\n//   const authContext = useMemo(\r\n//     () => ({\r\n//         signIn: async (email, password) => {\r\n\r\n//           await signInWithEmailAndPassword(auth, email, password)\r\n//           .then( userCredentials =>{\r\n//             const userInf = userCredentials.user;\r\n//             // console.log(userInf);\r\n\r\n//             setUserId(() => userInf.uid);\r\n\r\n//             if(userId == '') console.log('True');\r\n\r\n//             console.log('User id at App is:', userInf.uid);\r\n\r\n//             dispatch({type: 'SIGN_IN', token: 'dummy-auth-token'});\r\n\r\n//             setCount(prevCount => prevCount + 1)\r\n//           })\r\n//           .catch(error => {\r\n//             Alert.alert('Error', 'Invalid email/password.')\r\n//             console.log('Error in signing in', error.message);\r\n//           })\r\n\r\n//         //   dispatch({type: 'SIGN_IN', token: 'dummy-auth-token'});\r\n          \r\n//         },\r\n\r\n//         signOut : () => dispatch({type: 'SIGN_OUT'}),\r\n\r\n//         signUp: async (email, password, confirmedPassword) => {\r\n\r\n//           if (password != '' && password === confirmedPassword) {\r\n//             createUserWithEmailAndPassword(auth, email, password)\r\n//             .then( userCredentials => {\r\n//               console.log(userCredentials.user);\r\n              \r\n//               setDoc(doc(db, 'users', userCredentials.user.uid), {\r\n//                 email: userCredentials.user.email\r\n//               });\r\n\r\n//               console.log('A new user has signed up');\r\n              \r\n//               dispatch({type: 'SIGN_IN', token: 'dummy-auth-token'})\r\n//             })\r\n//             .catch (error => {\r\n//               console.log('Error in signing up a new user', error.message);\r\n//             })\r\n//           } else {\r\n//             Alert.alert('Error', 'Your password is different from your confirmed password')\r\n//           }\r\n//         },\r\n//         userId: userId,\r\n\r\n//     })\r\n//   , [count]);\r\n\r\n    const value = {\r\n        state,\r\n        currentUser,\r\n        userDoc,\r\n        info,\r\n\r\n        login,\r\n        signup,\r\n        signout\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}