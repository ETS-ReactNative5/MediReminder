{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport CalendarStrip from 'react-native-calendar-strip';\nimport { MaterialIcons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport MedicationItem from \"./MedicationItem\";\nimport { collection, doc, getDoc, getDocs, onSnapshot, orderBy, query } from \"@firebase/firestore\";\nimport { db } from \"../firebase/Config\";\nimport { log, set } from \"react-native-reanimated\";\nimport { AuthContext, useAuth } from \"../Context/AuthContext\";\nimport { Divider } from \"react-native-elements/dist/divider/Divider\";\nimport MedicationForm from \"./MedicationForm\";\nimport QRScannerScreen from \"../screens/QRScannerScreen\";\nexport default function Calendar(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      newDate = _useState2[0],\n      setNewDate = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newMedication = _useState4[0],\n      setNewMedication = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      newTime = _useState6[0],\n      setNewTime = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      loading = _useState8[0],\n      setLoading = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      openAddMedication = _useState10[0],\n      setOpenAddMedication = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      openQRCodeScanner = _useState12[0],\n      setOpenQRCodeScanner = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      openTransititon = _useState14[0],\n      setOpenTransition = _useState14[1];\n\n  var _useState15 = useState(new Date()),\n      _useState16 = _slicedToArray(_useState15, 2),\n      currentDate = _useState16[0],\n      setCurrentDate = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      haveRemindersToday = _useState18[0],\n      setHaveRemindersToday = _useState18[1];\n\n  var _useAuth = useAuth(),\n      currentUser = _useAuth.currentUser,\n      medications = _useAuth.medications,\n      setMedications = _useAuth.setMedications;\n\n  useEffect(function () {\n    console.log(medications);\n    setTimeout(function () {\n      return setLoading(false);\n    }, 500);\n  }, []);\n  var daysHavingReminders = medications.map(function (medication) {\n    return medication.reminders;\n  }).flat(1).map(function (reminder) {\n    return reminder.timestamp;\n  }).reduce(function (uniqueTimestamps, item) {\n    if (!uniqueTimestamps.includes(item)) uniqueTimestamps.push(item);\n    return uniqueTimestamps;\n  }, []).sort(function (a, b) {\n    return a - b;\n  }).map(function (reminder) {\n    return reminder.toLocaleDateString();\n  });\n  useEffect(function () {\n    console.log(daysHavingReminders);\n  }, []);\n\n  var isHavingRemindersToday = function isHavingRemindersToday() {\n    return daysHavingReminders.includes(currentDate.toLocaleDateString());\n  };\n\n  var handleClickOpenAddMedication = function handleClickOpenAddMedication() {\n    setOpenTransition(true);\n  };\n\n  var handleClickOpenMedicationForm = function handleClickOpenMedicationForm() {\n    setOpenAddMedication(true);\n    setOpenTransition(false);\n  };\n\n  var handleClickOpenQRCodeScanner = function handleClickOpenQRCodeScanner() {\n    setOpenQRCodeScanner(true);\n    setOpenTransition(false);\n  };\n\n  var _useState19 = useState(),\n      _useState20 = _slicedToArray(_useState19, 2),\n      input = _useState20[0],\n      setInput = _useState20[1];\n\n  if (loading) return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    }\n  }, React.createElement(ActivityIndicator, {\n    size: 60,\n    color: \"#53cbff\"\n  }));\n  if (!loading) return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(CalendarStrip, {\n    scrollToOnSetSelectedDate: false,\n    scrollable: true,\n    scrollerPaging: true,\n    style: {\n      height: 80\n    },\n    calendarColor: 'white',\n    calendarHeaderStyle: {\n      color: 'black'\n    },\n    selectedDate: currentDate,\n    onDateSelected: function onDateSelected(selectedDate) {\n      console.log('Selected day:', selectedDate);\n      setCurrentDate(new Date(selectedDate));\n    },\n    dateNameStyle: {\n      color: 'black'\n    },\n    dateNumberStyle: {\n      color: 'black'\n    },\n    highlightDateNameStyle: {\n      color: '#53CBFF'\n    },\n    highlightDateNumberStyle: {\n      color: '#53CBFF'\n    },\n    calendarAnimation: {\n      type: 'sequence',\n      duration: 15\n    },\n    daySelectionAnimation: {\n      type: \"border\",\n      borderWidth: 2,\n      borderHighlightColor: '#53CBFF'\n    }\n  }), React.createElement(View, {\n    style: styles.listContainer\n  }, medications.length > 0 && isHavingRemindersToday() ? React.createElement(FlatList, {\n    showsVerticalScrollIndicator: true,\n    data: medications,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return item.reminders.filter(function (reminder) {\n        return reminder.timestamp.toLocaleDateString() == currentDate.toLocaleDateString();\n      }).map(function (reminder) {\n        return React.createElement(MedicationItem, {\n          navigation: navigation,\n          reminder: _objectSpread(_objectSpread({}, reminder), {}, {\n            medicationId: item.id,\n            name: item.name\n          }),\n          key: reminder.id\n        });\n      });\n    }\n  }) : React.createElement(View, {\n    style: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      flex: 1\n    }\n  }, React.createElement(Text, null, \"You have no medication today!\")), React.createElement(View, {\n    style: styles.submitButton\n  }, React.createElement(MaterialIcons, {\n    color: \"white\",\n    name: \"add-circle\",\n    size: 48,\n    onPress: handleClickOpenAddMedication\n  }))), React.createElement(Modal, {\n    animationType: \"fade\",\n    visible: openTransititon,\n    transparent: true\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'rgba(52, 52, 52, 0.8)'\n    }\n  }, React.createElement(View, {\n    style: styles.transitionContainer\n  }, React.createElement(View, {\n    style: {\n      backgroundColor: '#53cbff',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: 10,\n      borderTopLeftRadius: 10,\n      borderTopRightRadius: 10\n    }\n  }, React.createElement(Text, null, \"New Medication\")), React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      padding: 10\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: [styles.transitionButton, {\n      borderRightWidth: 1\n    }],\n    onPress: handleClickOpenMedicationForm\n  }, React.createElement(MaterialCommunityIcons, {\n    name: \"form-select\",\n    size: 36\n  }), React.createElement(Text, null, \"Manual\")), React.createElement(TouchableOpacity, {\n    style: styles.transitionButton,\n    onPress: handleClickOpenQRCodeScanner\n  }, React.createElement(MaterialCommunityIcons, {\n    name: \"qrcode-scan\",\n    size: 36\n  }), React.createElement(Text, null, \"QR Code\"))), React.createElement(TouchableOpacity, {\n    style: {\n      backgroundColor: '#53cbff',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: 10,\n      borderBottomRightRadius: 10,\n      borderBottomLeftRadius: 10\n    },\n    onPress: function onPress() {\n      return setOpenTransition(false);\n    }\n  }, React.createElement(Text, null, \"Cancel\"))))), React.createElement(Modal, {\n    presentationStyle: \"fullScreen\",\n    animationType: \"slide\",\n    visible: openAddMedication\n  }, React.createElement(MedicationForm, {\n    newDate: newDate,\n    newMedication: newMedication,\n    setNewDate: setNewDate,\n    setNewMedication: setNewMedication,\n    setOpenAddMedication: setOpenAddMedication,\n    newTime: newTime,\n    setNewTime: setNewTime\n  })), React.createElement(Modal, {\n    animationType: \"slide\",\n    visible: openQRCodeScanner\n  }, React.createElement(QRScannerScreen, {\n    setOpenQRCodeScanner: setOpenQRCodeScanner\n  })));\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'white'\n  },\n  list: {\n    flex: 1\n  },\n  listContainer: {\n    flex: 1,\n    backgroundColor: '#53cbff',\n    borderTopLeftRadius: 30,\n    borderTopRightRadius: 30\n  },\n  medicationItem: {\n    marginTop: 20,\n    marginHorizontal: 20,\n    padding: 10,\n    flexDirection: 'row',\n    borderWidth: 2,\n    borderRadius: 10,\n    borderStyle: \"dotted\"\n  },\n  submitButton: {\n    position: 'relative',\n    alignItems: 'center',\n    marginVertical: 10\n  },\n  transitionMedication: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'rgba(52, 52, 52, 0.8)'\n  },\n  transitionButton: {\n    height: 80,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  transitionContainer: {\n    backgroundColor: 'white',\n    borderRadius: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Máy tính/Projects/MediReminder/components/Calendar.js"],"names":["React","useContext","useEffect","useState","CalendarStrip","MaterialIcons","MaterialCommunityIcons","MedicationItem","collection","doc","getDoc","getDocs","onSnapshot","orderBy","query","db","log","set","AuthContext","useAuth","Divider","MedicationForm","QRScannerScreen","Calendar","navigation","newDate","setNewDate","newMedication","setNewMedication","newTime","setNewTime","loading","setLoading","openAddMedication","setOpenAddMedication","openQRCodeScanner","setOpenQRCodeScanner","openTransititon","setOpenTransition","Date","currentDate","setCurrentDate","haveRemindersToday","setHaveRemindersToday","currentUser","medications","setMedications","console","setTimeout","daysHavingReminders","map","medication","reminders","flat","reminder","timestamp","reduce","uniqueTimestamps","item","includes","push","sort","a","b","toLocaleDateString","isHavingRemindersToday","handleClickOpenAddMedication","handleClickOpenMedicationForm","handleClickOpenQRCodeScanner","input","setInput","flex","justifyContent","alignItems","styles","container","height","color","selectedDate","type","duration","borderWidth","borderHighlightColor","listContainer","length","id","filter","medicationId","name","submitButton","backgroundColor","transitionContainer","padding","borderTopLeftRadius","borderTopRightRadius","flexDirection","transitionButton","borderRightWidth","borderBottomRightRadius","borderBottomLeftRadius","StyleSheet","create","list","medicationItem","marginTop","marginHorizontal","borderRadius","borderStyle","position","marginVertical","transitionMedication"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { StyleSheet, Text, TextInput, View, TouchableOpacity, Button, TouchableWithoutFeedback, Keyboard, FlatList, Modal, Alert, ActivityIndicator } from \"react-native\";\r\nimport CalendarStrip from 'react-native-calendar-strip';\r\nimport {MaterialIcons, MaterialCommunityIcons} from '@expo/vector-icons'\r\nimport MedicationItem from \"./MedicationItem\";\r\nimport { collection, doc, getDoc, getDocs, onSnapshot, orderBy, query } from \"@firebase/firestore\";\r\nimport { db } from \"../firebase/Config\";\r\nimport { log, set } from \"react-native-reanimated\";\r\nimport { AuthContext, useAuth } from \"../Context/AuthContext\";\r\nimport { Divider } from \"react-native-elements/dist/divider/Divider\";\r\nimport MedicationForm from \"./MedicationForm\";\r\nimport QRScannerScreen from \"../screens/QRScannerScreen\";\r\nexport default function Calendar({navigation}){\r\n    const [newDate, setNewDate] = useState(''); \r\n    const [newMedication, setNewMedication] = useState('');\r\n    const [newTime, setNewTime] = useState('');\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const [openAddMedication, setOpenAddMedication] = useState(false)\r\n    const [openQRCodeScanner, setOpenQRCodeScanner] = useState(false)\r\n\r\n    const [openTransititon, setOpenTransition] = useState(false)\r\n    const [currentDate, setCurrentDate] = useState(new Date())\r\n    const [haveRemindersToday, setHaveRemindersToday] = useState(false)\r\n\r\n    const { currentUser, medications, setMedications } = useAuth()\r\n\r\n    useEffect(\r\n      () => {\r\n        console.log(medications)\r\n        setTimeout(() => setLoading(false), 500)\r\n      }\r\n    , [])\r\n\r\n    const daysHavingReminders = medications\r\n    .map( medication => medication.reminders )\r\n    .flat(1)\r\n    .map( reminder => reminder.timestamp )\r\n    .reduce( (uniqueTimestamps, item) => {\r\n      if (!uniqueTimestamps.includes(item)) uniqueTimestamps.push(item) \r\n\r\n      return uniqueTimestamps\r\n    }, [])\r\n    .sort( (a, b) => a - b)\r\n    .map( reminder => reminder.toLocaleDateString())\r\n\r\n    useEffect(\r\n      () => {\r\n        console.log(daysHavingReminders);\r\n      }\r\n    , [])\r\n\r\n\r\n\r\n    const isHavingRemindersToday = () => {\r\n      return daysHavingReminders.includes(currentDate.toLocaleDateString())\r\n    }\r\n\r\n    const handleClickOpenAddMedication = () => {\r\n      setOpenTransition(true)\r\n    }\r\n\r\n    const handleClickOpenMedicationForm = () => {\r\n      setOpenAddMedication(true)\r\n      setOpenTransition(false)\r\n    }\r\n\r\n    \r\n    const handleClickOpenQRCodeScanner = () => {\r\n      setOpenQRCodeScanner(true)\r\n      setOpenTransition(false)\r\n    }\r\n\r\n    const [input, setInput] = useState()\r\n\r\n    if (loading)\r\n    return (\r\n      <View style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>\r\n        <ActivityIndicator size={60} color='#53cbff'/>\r\n      </View>\r\n    )\r\n\r\n    if (!loading)\r\n    return (\r\n      \r\n      <View style={styles.container}>\r\n        <CalendarStrip\r\n        scrollToOnSetSelectedDate={false}\r\n        scrollable={true}\r\n        scrollerPaging={true}\r\n        style={{height: 80}}\r\n        calendarColor={'white'}\r\n        calendarHeaderStyle={{color: 'black'}}\r\n        selectedDate={currentDate}\r\n        onDateSelected={(selectedDate) => {\r\n          console.log('Selected day:', selectedDate);\r\n          setCurrentDate(new Date(selectedDate))\r\n          // console.log('Current day:', currentDate);\r\n        }}\r\n        \r\n        dateNameStyle={{color: 'black'}}\r\n        dateNumberStyle={{color: 'black'}}\r\n\r\n        highlightDateNameStyle={{color: '#53CBFF'}}\r\n        highlightDateNumberStyle={{color: '#53CBFF'}}\r\n        \r\n        calendarAnimation={{type: 'sequence', duration: 15}}\r\n        daySelectionAnimation={\r\n          {\r\n          type: \"border\",\r\n          borderWidth: 2,\r\n          borderHighlightColor: '#53CBFF',\r\n          }\r\n        }\r\n        />\r\n\r\n        <View style={styles.listContainer}>\r\n          \r\n          {/* {reminders.findIndex( reminder => reminder.timestamp.toLocaleDateString() == currentDate.toLocaleDateString()) > -1 ?\r\n          <View style={styles.list}>\r\n            <FlatList\r\n              showsVerticalScrollIndicator={true}\r\n              data={reminders}\r\n              keyExtractor={(item) => item.id}\r\n              renderItem={({ item })  => {\r\n\r\n                if (currentDate.toLocaleDateString() === item.timestamp.toLocaleDateString())\r\n                  return <MedicationItem navigation={navigation} reminders={reminders} setReminders={setReminders} key={item.id} setRefresh={doEffect} reminder={item}/>\r\n              }\r\n              }\r\n            />\r\n          </View>\r\n          :\r\n          <View style={{justifyContent: 'center', alignItems: 'center', flex: 1}}>\r\n              <Text>No reminder today!</Text>\r\n          </View>\r\n          } */}\r\n          { medications.length > 0 && isHavingRemindersToday() ? \r\n                      <FlatList\r\n                      showsVerticalScrollIndicator={true}\r\n                      data={medications}\r\n                      keyExtractor={(item) => item.id}\r\n                      renderItem={({ item })  => {\r\n                        // console.log('----------------------------------------------');\r\n                        // console.log(item.name);\r\n                        // console.log(item.reminders[0]);\r\n                        return item.reminders\r\n                        .filter(reminder => { return reminder.timestamp.toLocaleDateString() == currentDate.toLocaleDateString()})\r\n                        .map(reminder => <MedicationItem navigation={navigation} reminder={{\r\n                          ...reminder,\r\n                          medicationId: item.id,\r\n                          name: item.name\r\n                        }} key={reminder.id}/>)\r\n                        // return [<MedicationItem reminder={item.reminders[1]}/>]\r\n                      }\r\n                      }\r\n                    />\r\n            :\r\n            <View style={{justifyContent: 'center', alignItems: 'center', flex: 1}}>\r\n              <Text>You have no medication today!</Text>\r\n            </View>\r\n          }\r\n\r\n\r\n          {/* Add form Button */}\r\n          <View style={styles.submitButton}>\r\n            <MaterialIcons\r\n              color='white'\r\n              name='add-circle'\r\n              size={48}\r\n              onPress={handleClickOpenAddMedication}\r\n            />\r\n          </View>\r\n        </View>\r\n\r\n        {/* Selection from */}\r\n        <Modal\r\n          animationType='fade'\r\n          visible={openTransititon}\r\n          transparent={true}\r\n        >\r\n          <View style={{flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(52, 52, 52, 0.8)'}}>\r\n            <View style={styles.transitionContainer}>\r\n              <View style={{backgroundColor: '#53cbff', alignItems: 'center', justifyContent: 'center', padding: 10, borderTopLeftRadius: 10, borderTopRightRadius: 10}}>\r\n                <Text>New Medication</Text>\r\n              </View>\r\n\r\n              <View style={{flexDirection: 'row', padding: 10}}>\r\n                <TouchableOpacity style={[styles.transitionButton, {borderRightWidth: 1}]} onPress={handleClickOpenMedicationForm}>\r\n                <MaterialCommunityIcons name='form-select' size={36}/>\r\n                  <Text>Manual</Text>\r\n                </TouchableOpacity>\r\n\r\n                <TouchableOpacity style={styles.transitionButton} onPress={handleClickOpenQRCodeScanner}>\r\n                  <MaterialCommunityIcons name='qrcode-scan' size={36}/>\r\n                  <Text>QR Code</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              <TouchableOpacity style={{backgroundColor: '#53cbff', alignItems: 'center', justifyContent: 'center', padding: 10, borderBottomRightRadius: 10, borderBottomLeftRadius: 10}} onPress={() => setOpenTransition(false)}>\r\n                <Text>Cancel</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n\r\n          {/* <MedicationForm\r\n            newDate = {newDate}\r\n            newMedication={newMedication}\r\n            setNewDate={setNewDate}\r\n            setNewMedication={setNewMedication}\r\n            setOpenAddMedication={setOpenAddMedication}\r\n            newTime={newTime}\r\n            setNewTime={setNewTime}\r\n          /> */}\r\n        </Modal>\r\n\r\n        {/* Manual input form */}\r\n        <Modal\r\n          presentationStyle=\"fullScreen\"\r\n          animationType='slide'\r\n          visible={openAddMedication}\r\n        >\r\n            <MedicationForm\r\n            newDate = {newDate}\r\n            newMedication={newMedication}\r\n            setNewDate={setNewDate}\r\n            setNewMedication={setNewMedication}\r\n            setOpenAddMedication={setOpenAddMedication}\r\n            newTime={newTime}\r\n            setNewTime={setNewTime}\r\n            />\r\n        </Modal>\r\n        \r\n        {/* Scan QR code */}\r\n        <Modal\r\n          animationType='slide'\r\n          visible={openQRCodeScanner}\r\n        >\r\n          <QRScannerScreen\r\n            setOpenQRCodeScanner={setOpenQRCodeScanner}\r\n          />\r\n        </Modal>\r\n        \r\n      </View>\r\n    )\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: 'white',\r\n  },\r\n  list: {\r\n    flex: 1,\r\n    // backgroundColor: '#53cbff',\r\n  },\r\n  listContainer: {\r\n    flex: 1,\r\n    backgroundColor: '#53cbff',\r\n    borderTopLeftRadius: 30,\r\n    borderTopRightRadius: 30\r\n  },\r\n  medicationItem: {\r\n    marginTop: 20,\r\n    marginHorizontal: 20,\r\n    padding: 10,\r\n    flexDirection: 'row',\r\n    borderWidth: 2,\r\n    borderRadius: 10,\r\n    borderStyle: \"dotted\"\r\n  },\r\n  submitButton: {\r\n    position: 'relative',\r\n    alignItems: 'center',\r\n    marginVertical: 10,\r\n    // backgroundColor: '#53cbff',\r\n  },\r\n  transitionMedication : {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    backgroundColor: 'rgba(52, 52, 52, 0.8)',\r\n  },\r\n  transitionButton : {\r\n    // borderWidth: 1,\r\n    // width: 200,\r\n    // height: 40\r\n    height: 80,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: 20,\r\n  },\r\n  transitionContainer : {\r\n    backgroundColor: 'white',\r\n    borderRadius: 10\r\n    // justifyContent: 'center',\r\n    // alignItems: 'center',\r\n    // padding: 20\r\n  }\r\n})\r\n\r\n// Có 1 vấn đề t đang gặp là: dữ liệu được đọc được xử lí nhanh hơn dữ liệu được ghi (và t chưa biết giải quyết nó như thế nào trong RN)\r\n// nên khi mỗi lần mình insert hay remove 1 cái doc/collection mới ở các screen HomeScreen, RecordScreen, MedicationScreen,\r\n// thì mình phải refresh lại cái screen đó (Ctrl + S trong cái file chứa screen đó) thì nó mới được cập nhật chính xác.\r\n// Nên mọi người nhớ refresh lại nhe. Phase cuối còn 2 tuần thì t nghĩ mình sẽ giải quyết được cái này.\r\n"]},"metadata":{},"sourceType":"module"}